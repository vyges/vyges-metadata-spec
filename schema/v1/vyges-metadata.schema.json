{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://vyges.com/schema/v1/vyges-metadata.schema.json",
  "title": "Vyges IP Metadata",
  "description": "Metadata manifest for reusable silicon IP blocks in the Vyges ecosystem.",
  "x-version": "1.0.0",
  "contact": {
    "name": "Vyges Community",
    "url": "https://github.com/vyges/vyges-metadata-spec",
    "email": "https://github.com/vyges/vyges-metadata-spec/issues"
  },
  "x-author": "Shivaram Mysore",
  "x-company": "Vyges Inc.",
  "x-copyright": "Copyright \u00a9 2025 Vyges Inc. All rights reserved.",
  "x-documentation": "https://github.com/vyges/vyges-metadata-spec",
  "x-support": "https://github.com/vyges/vyges-metadata-spec/issues",
  "x-api-version": "v1",
  "x-case-convention": {
    "parameters": "camelCase",
    "enums": "SCREAMING_SNAKE_CASE",
    "endpoints": "kebab-case"
  },
  "type": "object",
  "required": [
    "name",
    "x-version",
    "version",
    "license",
    "interfaces",
    "template",
    "target",
    "design_type",
    "maturity"
  ],
  "properties": {
    "community": {
      "type": "object",
      "description": "Community and ecosystem contributions",
      "properties": {
        "issues": {
          "type": "string",
          "format": "uri",
          "description": "Link to GitHub issues or support forum",
          "examples": [
            "https://github.com/vyges/spi-controller/issues",
            "https://forum.vyges.com",
            "https://acme.com/support"
          ]
        },
        "contributions": {
          "type": "boolean",
          "description": "Is the project accepting external contributions?",
          "examples": [
            true,
            false
          ]
        },
        "chat": {
          "type": "string",
          "format": "uri",
          "description": "Link to Discord, Gitter, Slack, or Zulip",
          "examples": [
            "https://discord.gg/vyges",
            "https://gitter.im/vyges/community",
            "https://vyges.slack.com"
          ]
        }
      },
      "examples": [
        {
          "issues": "https://github.com/vyges/spi-controller/issues",
          "contributions": true,
          "chat": "https://discord.gg/vyges"
        },
        {
          "issues": "https://acme.com/support",
          "contributions": false,
          "chat": "https://acme.slack.com"
        }
      ]
    },
    "maintainers": {
      "type": "array",
      "description": "List of maintainers responsible for this IP block",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the maintainer",
            "examples": [
              "Shivaram Mysore",
              "John Doe",
              "Jane Smith"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Contact email address",
            "examples": [
              "shivaram@vyges.com",
              "john.doe@acme.com"
            ]
          },
          "github": {
            "type": "string",
            "description": "GitHub username for collaboration",
            "examples": [
              "smysore",
              "johndoe",
              "janesmith"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "examples": [
        [
          {
            "name": "Shivaram Mysore",
            "email": "shivaram@vyges.com",
            "github": "smysore"
          }
        ],
        [
          {
            "name": "John Doe",
            "email": "john.doe@acme.com",
            "github": "johndoe"
          },
          {
            "name": "Jane Smith",
            "github": "janesmith"
          }
        ]
      ]
    },
    "registry": {
      "type": "object",
      "description": "Registry information for catalog discovery and management",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "draft",
            "submitted",
            "approved",
            "rejected",
            "deprecated"
          ],
          "description": "Current status in the registry approval process",
          "default": "draft",
          "examples": [
            "draft",
            "submitted",
            "approved",
            "rejected"
          ]
        },
        "submission_date": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp when this IP was submitted to the registry",
          "examples": [
            "2024-01-15T10:30:00Z",
            "2024-01-16T14:20:00Z"
          ]
        },
        "approval_date": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp when this IP was approved for the registry",
          "examples": [
            "2024-01-16T14:20:00Z",
            "2024-01-17T09:15:00Z"
          ]
        },
        "verified_by": {
          "type": "string",
          "description": "GitHub username of the person who verified this IP for registry inclusion",
          "examples": [
            "vyges-team",
            "smysore",
            "johndoe"
          ]
        },
        "registry_id": {
          "type": "string",
          "pattern": "^[a-z0-9-]+$",
          "description": "Unique identifier for this IP in the registry (auto-generated if not provided)",
          "examples": [
            "spi-controller-v1",
            "pcie-phy-v3",
            "uart-controller-v2"
          ]
        },
        "compliance_check": {
          "type": "object",
          "description": "Compliance validation results",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "pending",
                "passing",
                "failing"
              ],
              "description": "Current compliance status",
              "examples": [
                "pending",
                "passing",
                "failing"
              ]
            },
            "last_checked": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 timestamp of last compliance check",
              "examples": [
                "2024-01-16T14:20:00Z",
                "2024-01-15T16:30:00Z"
              ]
            },
            "checker_version": {
              "type": "string",
              "description": "Version of compliance checker used",
              "examples": [
                "1.0.0",
                "0.9.5",
                "2.1.0"
              ]
            },
            "issues": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of compliance issues found",
              "examples": [
                [],
                [
                  "missing_description",
                  "invalid_license"
                ],
                [
                  "encrypted_ip"
                ]
              ]
            }
          },
          "examples": [
            {
              "status": "passing",
              "last_checked": "2024-01-16T14:20:00Z",
              "checker_version": "1.0.0",
              "issues": []
            },
            {
              "status": "failing",
              "last_checked": "2024-01-15T16:30:00Z",
              "checker_version": "0.9.5",
              "issues": [
                "missing_description",
                "invalid_license"
              ]
            }
          ]
        }
      },
      "additionalProperties": false,
      "examples": [
        {
          "status": "approved",
          "submission_date": "2024-01-15T10:30:00Z",
          "approval_date": "2024-01-16T14:20:00Z",
          "verified_by": "vyges-team",
          "registry_id": "spi-controller-v1",
          "compliance_check": {
            "status": "passing",
            "last_checked": "2024-01-16T14:20:00Z",
            "checker_version": "1.0.0",
            "issues": []
          }
        },
        {
          "status": "draft",
          "registry_id": "pcie-phy-v3"
        }
      ]
    },
    "compatibility": {
      "type": "object",
      "description": "Compatibility information and version constraints",
      "properties": {
        "min_vyges_version": {
          "type": "string",
          "description": "Minimum Vyges platform version required",
          "examples": [
            "1.0.0",
            "2.0.0",
            "3.0.0"
          ]
        },
        "max_vyges_version": {
          "type": "string",
          "description": "Maximum Vyges platform version supported",
          "examples": [
            "3.0.0",
            "4.0.0",
            "latest"
          ]
        },
        "breaking_changes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "examples": [
                  "2.0.0",
                  "3.0.0",
                  "4.0.0"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "API interface changed",
                  "Parameter names updated",
                  "New required fields added"
                ]
              },
              "migration_guide": {
                "type": "string",
                "format": "uri",
                "examples": [
                  "https://docs.vyges.com/migration/v2",
                  "https://docs.vyges.com/migration/v3"
                ]
              }
            },
            "required": [
              "version",
              "description"
            ],
            "examples": [
              {
                "version": "2.0.0",
                "description": "API interface changed",
                "migration_guide": "https://docs.vyges.com/migration/v2"
              },
              {
                "version": "3.0.0",
                "description": "Parameter names updated"
              }
            ]
          },
          "description": "List of breaking changes and migration guides",
          "examples": [
            [
              {
                "version": "2.0.0",
                "description": "API interface changed",
                "migration_guide": "https://docs.vyges.com/migration/v2"
              }
            ],
            [
              {
                "version": "3.0.0",
                "description": "Parameter names updated"
              },
              {
                "version": "4.0.0",
                "description": "New required fields added",
                "migration_guide": "https://docs.vyges.com/migration/v4"
              }
            ]
          ]
        },
        "deprecated_since": {
          "type": "string",
          "description": "Version when this IP was deprecated",
          "examples": [
            "2.0.0",
            "3.0.0",
            "4.0.0"
          ]
        },
        "replacement": {
          "type": "string",
          "description": "Name of the replacement IP (if deprecated)",
          "examples": [
            "spi-controller-v2",
            "pcie-phy-v3",
            "uart-controller-v2"
          ]
        }
      },
      "examples": [
        {
          "min_vyges_version": "1.0.0",
          "max_vyges_version": "3.0.0",
          "breaking_changes": [
            {
              "version": "2.0.0",
              "description": "API interface changed",
              "migration_guide": "https://docs.vyges.com/migration/v2"
            }
          ]
        },
        {
          "min_vyges_version": "2.0.0",
          "deprecated_since": "3.0.0",
          "replacement": "spi-controller-v2"
        }
      ]
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Searchable tags for categorizing and discovering the IP",
      "examples": [
        [
          "spi",
          "controller",
          "apb",
          "master"
        ],
        [
          "pcie",
          "phy",
          "encrypted",
          "mixed-signal"
        ],
        [
          "uart",
          "serial",
          "communication"
        ]
      ]
    },
    "fpga": {
      "type": "object",
      "description": "FPGA-specific configuration and requirements",
      "properties": {
        "toolchain": {
          "type": "string",
          "enum": [
            "vivado",
            "quartus",
            "yosys",
            "symbiflow"
          ],
          "description": "Primary FPGA toolchain used",
          "examples": [
            "vivado",
            "quartus",
            "yosys",
            "symbiflow"
          ]
        },
        "board": {
          "type": "string",
          "description": "Name of the supported FPGA board",
          "examples": [
            "arty-a7-35",
            "nexys-a7-100t",
            "de10-nano",
            "ice40-hx8k-b-evn"
          ]
        },
        "cfu_playground_compatible": {
          "type": "boolean",
          "description": "Whether this IP is compatible with CFU Playground",
          "examples": [
            true,
            false
          ]
        },
        "constraints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of constraint files (.xdc, .sdc, etc.)",
          "examples": [
            [
              "constraints.xdc",
              "timing.sdc"
            ],
            [
              "arty-a7-35.xdc"
            ],
            [
              "de10-nano.sdc"
            ]
          ]
        },
        "hard_ip": {
          "type": "boolean",
          "description": "Whether this is a hard IP block (vendor-provided)",
          "examples": [
            true,
            false
          ]
        },
        "vendor": {
          "type": "string",
          "enum": [
            "xilinx",
            "intel",
            "lattice",
            "microchip"
          ],
          "description": "FPGA vendor for hard IP blocks",
          "examples": [
            "xilinx",
            "intel",
            "lattice",
            "microchip"
          ]
        }
      },
      "required": [
        "toolchain"
      ],
      "examples": [
        {
          "toolchain": "vivado",
          "board": "arty-a7-35",
          "cfu_playground_compatible": true,
          "constraints": [
            "constraints.xdc",
            "timing.sdc"
          ]
        },
        {
          "toolchain": "yosys",
          "board": "ice40-hx8k-b-evn",
          "constraints": [
            "ice40-hx8k-b-evn.pcf"
          ]
        },
        {
          "toolchain": "quartus",
          "board": "de10-nano",
          "hard_ip": true,
          "vendor": "intel",
          "constraints": [
            "de10-nano.sdc"
          ]
        }
      ]
    },
    "automation": {
      "type": "object",
      "description": "Automation requirements and capabilities",
      "properties": {
        "meta": {
          "type": "object",
          "description": "Basic automation configuration and metadata",
          "properties": {
            "automation_level": {
              "type": "string",
              "enum": [
                "basic",
                "enhanced",
                "full"
              ],
              "description": "Level of automation support this IP provides",
              "default": "basic",
              "examples": [
                "basic",
                "enhanced",
                "full"
              ]
            },
            "enabled": {
              "type": "boolean",
              "description": "Whether automation is enabled for this IP",
              "default": true,
              "examples": [
                true,
                false
              ]
            }
          }
        },
        "requirements": {
          "type": "object",
          "description": "Automation requirements and field specifications",
          "properties": {
            "minimal_required": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "name",
                  "version",
                  "license",
                  "interfaces",
                  "template",
                  "target",
                  "design_type",
                  "maturity",
                  "description",
                  "source",
                  "asic",
                  "fpga",
                  "test",
                  "flows"
                ]
              },
              "description": "Minimum fields required for basic automation",
              "examples": [
                [
                  "name",
                  "version",
                  "license",
                  "interfaces",
                  "template",
                  "target",
                  "design_type",
                  "maturity",
                  "description",
                  "source",
                  "asic",
                  "fpga",
                  "test",
                  "flows"
                ]
              ]
            },
            "recommended_for_automation": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parameters",
                  "dependencies",
                  "toolRequirements",
                  "performance",
                  "reliability",
                  "packaging",
                  "commercial",
                  "community",
                  "security",
                  "compliance"
                ]
              },
              "description": "Recommended fields for enhanced automation",
              "examples": [
                [
                  "parameters",
                  "dependencies",
                  "toolRequirements",
                  "performance",
                  "reliability",
                  "packaging",
                  "community",
                  "security"
                ]
              ]
            },
            "blocking_issues": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Issues that prevent automation (e.g., missing source, encrypted IP)",
              "examples": [
                [
                  "encrypted_ip",
                  "requires_nda"
                ],
                [
                  "missing_source"
                ],
                []
              ]
            }
          }
        },
        "capabilities": {
          "type": "object",
          "description": "Automation capabilities and workflow support",
          "properties": {
            "workflow_support": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ci_cd_integration",
                  "automated_testing",
                  "documentation_generation",
                  "dependency_management",
                  "version_control",
                  "release_automation"
                ]
              },
              "description": "Supported automation workflows",
              "examples": [
                [
                  "ci_cd_integration",
                  "automated_testing",
                  "documentation_generation"
                ],
                [
                  "dependency_management",
                  "version_control"
                ]
              ]
            },
            "integration_points": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "github_actions",
                  "gitlab_ci",
                  "jenkins",
                  "azure_devops",
                  "custom_scripts"
                ]
              },
              "description": "Supported CI/CD integration points",
              "examples": [
                [
                  "github_actions",
                  "custom_scripts"
                ],
                [
                  "jenkins",
                  "azure_devops"
                ]
              ]
            }
          }
        },
        "security_policy": {
          "type": "object",
          "description": "Project-wide security policy for automation",
          "properties": {
            "min_security_level": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high",
                "critical"
              ],
              "description": "Minimum security level required for all IPs in this project",
              "examples": [
                "medium",
                "high",
                "critical"
              ]
            },
            "require_assertions": {
              "type": "boolean",
              "description": "Whether security assertions are required for all IPs",
              "default": false,
              "examples": [
                true,
                false
              ]
            },
            "require_secure_testbench": {
              "type": "boolean",
              "description": "Whether secure testbench generation is required",
              "default": false,
              "examples": [
                true,
                false
              ]
            },
            "require_formal_verification": {
              "type": "boolean",
              "description": "Whether formal verification is required for security properties",
              "default": false,
              "examples": [
                true,
                false
              ]
            },
            "tag_high_risk_ips": {
              "type": "boolean",
              "description": "Whether to automatically tag high-risk IPs",
              "default": true,
              "examples": [
                true,
                false
              ]
            },
            "enforced_standards": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Security standards that must be enforced",
              "examples": [
                [
                  "iso_26262",
                  "iec_61508"
                ],
                [
                  "fips_140",
                  "nist_sp_800"
                ]
              ]
            },
            "automated_checks": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Automated security checks to run",
              "examples": [
                [
                  "assertion_coverage",
                  "fuzzing_tests",
                  "formal_verification"
                ],
                [
                  "side_channel_analysis",
                  "threat_modeling",
                  "compliance_check"
                ]
              ]
            }
          },
          "examples": [
            {
              "min_security_level": "medium",
              "require_assertions": true,
              "require_secure_testbench": true,
              "tag_high_risk_ips": true,
              "enforced_standards": [
                "iso_26262"
              ],
              "automated_checks": [
                "assertion_coverage",
                "fuzzing_tests"
              ]
            },
            {
              "min_security_level": "critical",
              "require_assertions": true,
              "require_secure_testbench": true,
              "require_formal_verification": true,
              "tag_high_risk_ips": true,
              "enforced_standards": [
                "fips_140",
                "nist_sp_800"
              ],
              "automated_checks": [
                "assertion_coverage",
                "fuzzing_tests",
                "formal_verification",
                "side_channel_analysis"
              ]
            }
          ]
        }
      },
      "examples": [
        {
          "meta": {
            "automation_level": "enhanced",
            "enabled": true
          },
          "requirements": {
            "minimal_required": [
              "name",
              "version",
              "license",
              "interfaces",
              "template",
              "target",
              "design_type",
              "maturity",
              "description",
              "source",
              "asic",
              "fpga",
              "test",
              "flows"
            ],
            "recommended_for_automation": [
              "parameters",
              "dependencies",
              "toolRequirements",
              "performance",
              "reliability",
              "packaging",
              "community",
              "security"
            ]
          },
          "capabilities": {
            "workflow_support": [
              "ci_cd_integration",
              "automated_testing",
              "documentation_generation"
            ],
            "integration_points": [
              "github_actions",
              "custom_scripts"
            ]
          },
          "security_policy": {
            "min_security_level": "medium",
            "require_assertions": true,
            "require_secure_testbench": true,
            "tag_high_risk_ips": true,
            "enforced_standards": [
              "iso_26262"
            ],
            "automated_checks": [
              "assertion_coverage",
              "fuzzing_tests"
            ]
          }
        },
        {
          "meta": {
            "automation_level": "basic",
            "enabled": true
          },
          "requirements": {
            "minimal_required": [
              "name",
              "version",
              "license",
              "interfaces",
              "template",
              "target",
              "design_type",
              "maturity",
              "description",
              "source",
              "asic",
              "fpga",
              "test",
              "flows"
            ],
            "recommended_for_automation": [
              "commercial",
              "compliance",
              "security"
            ],
            "blocking_issues": [
              "encrypted_ip",
              "requires_nda"
            ]
          },
          "capabilities": {
            "workflow_support": [
              "dependency_management",
              "version_control"
            ],
            "integration_points": [
              "custom_scripts"
            ]
          }
        }
      ]
    },
    "branding": {
      "type": "object",
      "description": "Optional branding metadata for provider attribution.",
      "properties": {
        "provider": {
          "type": "string",
          "description": "Name of the company, organization, or individual maintaining the IP.",
          "examples": [
            "Vyges Inc.",
            "Acme Semiconductor",
            "OpenHW Group"
          ]
        },
        "logo": {
          "type": "string",
          "format": "uri",
          "description": "URL to a logo image (SVG or PNG preferred).",
          "examples": [
            "https://vyges.com/images/logo.svg",
            "https://acme.com/logo.png"
          ]
        },
        "website": {
          "type": "string",
          "format": "uri",
          "description": "Link to the official IP page or provider's site.",
          "examples": [
            "https://vyges.com",
            "https://acme.com/ip/pcie-phy"
          ]
        },
        "usage": {
          "type": "string",
          "description": "Optional note describing how branding may be used (e.g., attribution only).",
          "examples": [
            "Attribution only",
            "Logo may be used in documentation",
            "Contact for commercial use"
          ]
        }
      },
      "required": [
        "provider"
      ],
      "additionalProperties": false,
      "examples": [
        {
          "provider": "Vyges Inc.",
          "logo": "https://vyges.com/images/logo.svg",
          "website": "https://vyges.com",
          "usage": "Attribution only"
        },
        {
          "provider": "Acme Semiconductor",
          "website": "https://acme.com/ip/pcie-phy",
          "usage": "Contact for commercial use"
        }
      ]
    },
    "created": {
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 timestamp when this IP was first created",
      "examples": [
        "2024-01-15T10:30:00Z",
        "2023-12-01T09:15:00Z"
      ]
    },
    "interfaces": {
      "type": "array",
      "description": "One or more external interfaces this IP exposes",
      "items": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "interface_types": {
            "type": "object",
            "description": "Interface type and direction configuration",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bus",
                  "io",
                  "interrupt",
                  "clock",
                  "reset",
                  "chiplet"
                ],
                "description": "Interface type category",
                "examples": [
                  "bus",
                  "io",
                  "interrupt",
                  "chiplet"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "input",
                  "output",
                  "inout"
                ],
                "description": "Signal direction: input (to IP), output (from IP), or inout (bidirectional)",
                "examples": [
                  "input",
                  "output",
                  "inout"
                ]
              }
            }
          },
          "protocol_config": {
            "type": "object",
            "description": "Protocol and configuration details",
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Bus protocol name, e.g. AXI4-Lite, APB, TileLink",
                "examples": [
                  "APB",
                  "AXI4-Lite",
                  "TileLink",
                  "SPI",
                  "I2C"
                ]
              },
              "width": {
                "type": "integer",
                "description": "Interface width in bits (for bus interfaces)",
                "examples": [
                  32,
                  64,
                  128,
                  8
                ]
              }
            }
          },
          "signal_definitions": {
            "type": "object",
            "description": "Detailed signal specifications",
            "properties": {
              "signals": {
                "type": "array",
                "description": "List of signals in this interface",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "direction"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Signal name as it appears in the RTL",
                      "examples": [
                        "PCLK",
                        "PRESETn",
                        "PADDR",
                        "PWDATA",
                        "PRDATA"
                      ]
                    },
                    "direction": {
                      "type": "string",
                      "enum": [
                        "input",
                        "output",
                        "inout"
                      ],
                      "description": "Signal direction relative to the IP block",
                      "examples": [
                        "input",
                        "output",
                        "inout"
                      ]
                    },
                    "width": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Signal width in bits (1 for single-bit signals)",
                      "examples": [
                        1,
                        8,
                        32,
                        64
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "data",
                        "control",
                        "clock",
                        "reset",
                        "interrupt",
                        "status"
                      ],
                      "description": "Signal category for better understanding",
                      "examples": [
                        "clock",
                        "reset",
                        "data",
                        "control"
                      ]
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the signal's purpose",
                      "examples": [
                        "APB clock signal",
                        "APB reset signal",
                        "APB address bus"
                      ]
                    },
                    "active_level": {
                      "type": "string",
                      "enum": [
                        "high",
                        "low"
                      ],
                      "description": "Active level for control signals (e.g., reset, enable)",
                      "examples": [
                        "high",
                        "low"
                      ]
                    }
                  },
                  "examples": [
                    {
                      "name": "PCLK",
                      "direction": "input",
                      "type": "clock",
                      "description": "APB clock signal"
                    },
                    {
                      "name": "PRESETn",
                      "direction": "input",
                      "type": "reset",
                      "active_level": "low",
                      "description": "APB reset signal"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "examples": [
        [
          {
            "interface_types": {
              "type": "bus",
              "direction": "input"
            },
            "protocol_config": {
              "protocol": "APB",
              "width": 32
            },
            "signal_definitions": {
              "signals": [
                {
                  "name": "PCLK",
                  "direction": "input",
                  "type": "clock",
                  "description": "APB clock signal"
                },
                {
                  "name": "PRESETn",
                  "direction": "input",
                  "type": "reset",
                  "active_level": "low",
                  "description": "APB reset signal"
                }
              ]
            }
          }
        ],
        [
          {
            "interface_types": {
              "type": "chiplet",
              "direction": "inout"
            },
            "protocol_config": {
              "protocol": "UCIe",
              "width": 64
            },
            "signal_definitions": {
              "signals": [
                {
                  "name": "ucie_clk",
                  "direction": "input",
                  "type": "clock",
                  "description": "UCIe clock signal"
                },
                {
                  "name": "ucie_rst_n",
                  "direction": "input",
                  "type": "reset",
                  "active_level": "low",
                  "description": "UCIe reset signal"
                },
                {
                  "name": "ucie_tx_data",
                  "direction": "output",
                  "type": "data",
                  "width": 64,
                  "description": "UCIe transmit data"
                },
                {
                  "name": "ucie_rx_data",
                  "direction": "input",
                  "type": "data",
                  "width": 64,
                  "description": "UCIe receive data"
                }
              ]
            }
          }
        ],
        [
          {
            "interface_types": {
              "type": "io",
              "direction": "inout"
            },
            "protocol_config": {
              "protocol": "GPIO",
              "width": 8
            },
            "signal_definitions": {
              "signals": [
                {
                  "name": "gpio_in",
                  "direction": "input",
                  "type": "data",
                  "width": 8,
                  "description": "GPIO input signals"
                },
                {
                  "name": "gpio_out",
                  "direction": "output",
                  "type": "data",
                  "width": 8,
                  "description": "GPIO output signals"
                }
              ]
            }
          }
        ]
      ]
    },
    "asic": {
      "type": "object",
      "description": "ASIC-specific configuration and requirements",
      "properties": {
        "design_config": {
          "type": "object",
          "description": "Basic ASIC design configuration",
          "properties": {
            "flavor": {
              "type": "string",
              "enum": [
                "digital",
                "analog",
                "mixed-signal"
              ],
              "description": "ASIC design type",
              "examples": [
                "digital",
                "analog",
                "mixed-signal"
              ]
            },
            "pdks": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of supported PDKs (e.g., sky130B, gf180mcuC, ihp-sg13g2)",
              "examples": [
                [
                  "sky130B",
                  "sky130A"
                ],
                [
                  "gf180mcuC"
                ],
                [
                  "ihp-sg13g2",
                  "sky130B"
                ]
              ]
            },
            "clock_freq_mhz": {
              "type": "number",
              "description": "Target clock frequency in MHz",
              "examples": [
                100,
                250,
                500,
                1000
              ]
            }
          }
        },
        "tools": {
          "type": "object",
          "description": "ASIC design and verification tools",
          "properties": {
            "synthesis_tool": {
              "type": "string",
              "enum": [
                "openlane",
                "design_compiler",
                "genus",
                "yosys"
              ],
              "description": "Primary synthesis tool for digital flows",
              "examples": [
                "openlane",
                "design_compiler",
                "genus",
                "yosys"
              ]
            },
            "tools": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of tools used (e.g., ngspice, xschem for analog)",
              "examples": [
                [
                  "yosys",
                  "openroad"
                ],
                [
                  "ngspice",
                  "xschem"
                ],
                [
                  "openlane",
                  "magic"
                ]
              ]
            }
          }
        },
        "constraints": {
          "type": "object",
          "description": "Design constraints and configuration files",
          "properties": {
            "constraints": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of constraint files (.sdc, etc.)",
              "examples": [
                [
                  "constraints.sdc"
                ],
                [
                  "timing.sdc",
                  "area.sdc"
                ],
                []
              ]
            },
            "analog_models": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of analog model files (.spice, .ams, etc.)",
              "examples": [
                [
                  "models.spice"
                ],
                [
                  "analog.ams",
                  "models.spice"
                ],
                []
              ]
            }
          }
        },
        "views": {
          "type": "object",
          "description": "Design views and representations",
          "properties": {
            "symbol_views": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of symbol view files",
              "examples": [
                [
                  "symbol.sym"
                ],
                [
                  "spi_controller.sym"
                ],
                []
              ]
            },
            "layout_views": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of layout view files",
              "examples": [
                [
                  "layout.gds"
                ],
                [
                  "spi_controller.gds",
                  "spi_controller.lef"
                ],
                []
              ]
            }
          }
        },
        "mixed_signal": {
          "type": "object",
          "description": "Mixed-signal design configuration",
          "properties": {
            "digital_partition": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of digital RTL files for mixed-signal flows",
              "examples": [
                [
                  "spi_controller.v"
                ],
                [
                  "spi_controller.sv",
                  "spi_fifo.v"
                ],
                []
              ]
            },
            "analog_partition": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of analog files for mixed-signal flows",
              "examples": [
                [
                  "analog.spice"
                ],
                [
                  "analog.ams",
                  "analog.spice"
                ],
                []
              ]
            },
            "co_simulation": {
              "type": "object",
              "description": "Co-simulation configuration for mixed-signal flows",
              "properties": {
                "tool": {
                  "type": "string",
                  "description": "Co-simulation tool (e.g., ams-designer)",
                  "examples": [
                    "ams-designer",
                    "spectre",
                    "hspice"
                  ]
                },
                "interface_signals": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of interface signals between digital and analog partitions",
                  "examples": [
                    [
                      "clk",
                      "rst_n",
                      "data_in",
                      "data_out"
                    ],
                    [
                      "adc_in",
                      "dac_out"
                    ],
                    []
                  ]
                }
              },
              "examples": [
                {
                  "tool": "ams-designer",
                  "interface_signals": [
                    "clk",
                    "rst_n",
                    "data_in",
                    "data_out"
                  ]
                },
                {
                  "tool": "spectre",
                  "interface_signals": [
                    "adc_in",
                    "dac_out"
                  ]
                }
              ]
            }
          }
        }
      },
      "examples": [
        {
          "design_config": {
            "flavor": "digital",
            "pdks": [
              "sky130B",
              "sky130A"
            ],
            "clock_freq_mhz": 100
          },
          "tools": {
            "synthesis_tool": "openlane",
            "tools": [
              "yosys",
              "openroad"
            ]
          },
          "constraints": {
            "constraints": [
              "constraints.sdc"
            ]
          }
        },
        {
          "design_config": {
            "flavor": "analog",
            "pdks": [
              "sky130B"
            ]
          },
          "tools": {
            "tools": [
              "ngspice",
              "xschem"
            ]
          },
          "constraints": {
            "analog_models": [
              "models.spice"
            ]
          },
          "views": {
            "symbol_views": [
              "symbol.sym"
            ],
            "layout_views": [
              "layout.gds"
            ]
          }
        },
        {
          "design_config": {
            "flavor": "mixed-signal",
            "pdks": [
              "sky130B"
            ],
            "clock_freq_mhz": 250
          },
          "tools": {
            "synthesis_tool": "openlane"
          },
          "mixed_signal": {
            "digital_partition": [
              "spi_controller.v"
            ],
            "analog_partition": [
              "analog.spice"
            ],
            "co_simulation": {
              "tool": "ams-designer",
              "interface_signals": [
                "clk",
                "rst_n",
                "data_in",
                "data_out"
              ]
            }
          }
        }
      ]
    },
    "roadmap": {
      "type": "object",
      "description": "Future development plans and roadmap",
      "properties": {
        "planned_features": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of planned features or improvements",
          "examples": [
            [
              "DMA support",
              "Interrupt handling",
              "Power management"
            ],
            [
              "Multi-lane support",
              "Advanced error correction"
            ],
            [
              "Enhanced security features",
              "Performance optimizations"
            ]
          ]
        },
        "deprecation_plan": {
          "type": "string",
          "description": "Deprecation timeline and migration path",
          "examples": [
            "Version 2.0 will be deprecated in Q4 2024. Migration guide available at https://docs.vyges.com/migration",
            "No deprecation planned",
            "Legacy interface will be removed in v3.0. Use new API for future development."
          ]
        },
        "version_schedule": {
          "type": "object",
          "properties": {
            "next_major": {
              "type": "string",
              "format": "date",
              "examples": [
                "2024-12-01",
                "2025-03-15",
                "2025-06-01"
              ]
            },
            "next_minor": {
              "type": "string",
              "format": "date",
              "examples": [
                "2024-09-01",
                "2024-11-15",
                "2025-02-01"
              ]
            },
            "maintenance_until": {
              "type": "string",
              "format": "date",
              "examples": [
                "2026-12-31",
                "2027-06-30",
                "2028-01-01"
              ]
            }
          },
          "description": "Planned version release schedule",
          "examples": [
            {
              "next_major": "2024-12-01",
              "next_minor": "2024-09-01",
              "maintenance_until": "2026-12-31"
            },
            {
              "next_minor": "2024-11-15",
              "maintenance_until": "2027-06-30"
            }
          ]
        }
      },
      "examples": [
        {
          "planned_features": [
            "DMA support",
            "Interrupt handling",
            "Power management"
          ],
          "deprecation_plan": "Version 2.0 will be deprecated in Q4 2024. Migration guide available at https://docs.vyges.com/migration",
          "version_schedule": {
            "next_major": "2024-12-01",
            "next_minor": "2024-09-01",
            "maintenance_until": "2026-12-31"
          }
        },
        {
          "planned_features": [
            "Multi-lane support",
            "Advanced error correction"
          ],
          "deprecation_plan": "No deprecation planned"
        }
      ]
    },
    "delivery": {
      "type": "object",
      "description": "IP delivery and access information",
      "properties": {
        "encryptedRTL": {
          "type": "boolean",
          "description": "Whether the RTL is encrypted or proprietary",
          "examples": [
            true,
            false
          ]
        },
        "encryptedModels": {
          "type": "boolean",
          "description": "Whether analog models are encrypted",
          "examples": [
            true,
            false
          ]
        },
        "formats": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of delivered file formats (e.g., verilog, vhdl, lib, db, gds, spice)",
          "examples": [
            [
              "verilog",
              "vhdl"
            ],
            [
              "spice",
              "gds"
            ],
            [
              "verilog",
              "lib",
              "db"
            ]
          ]
        },
        "requiresNDA": {
          "type": "boolean",
          "description": "Whether an NDA is required for access",
          "examples": [
            true,
            false
          ]
        },
        "access": {
          "type": "string",
          "description": "Contact information or URL for requesting access",
          "examples": [
            "https://acme.com/contact",
            "sales@acme.com",
            "Contact sales@vyges.com for access"
          ]
        },
        "licenseModel": {
          "type": "string",
          "enum": [
            "evaluation",
            "per-project",
            "royalty",
            "proprietary"
          ],
          "description": "Type of licensing model",
          "examples": [
            "evaluation",
            "per-project",
            "royalty",
            "proprietary"
          ]
        },
        "partnerPortal": {
          "type": "string",
          "format": "uri",
          "description": "URL to partner portal for licensing",
          "examples": [
            "https://partners.acme.com",
            "https://licensing.vyges.com"
          ]
        }
      },
      "examples": [
        {
          "encryptedRTL": false,
          "encryptedModels": false,
          "formats": [
            "verilog",
            "vhdl"
          ],
          "requiresNDA": false
        },
        {
          "encryptedRTL": true,
          "encryptedModels": true,
          "formats": [
            "lib",
            "db",
            "gds"
          ],
          "requiresNDA": true,
          "access": "https://acme.com/contact",
          "licenseModel": "per-project",
          "partnerPortal": "https://partners.acme.com"
        }
      ]
    },
    "template": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9._-]+@[0-9]+\\.[0-9]+\\.[0-9]+$",
      "minLength": 3,
      "description": "Name and version of the template used (e.g., vyges-ip-template@1.0.0)",
      "examples": [
        "vyges-ip-template@1.0.0"
      ]
    },
    "version": {
      "type": "string",
      "description": "Semantic version of this IP block (e.g. 1.2.3). This is the version of the actual IP block being described and is used for dependency resolution, downloading specific versions, and release management. Each IP block has its own independent version.",
      "examples": [
        "1.0.0",
        "2.1.3",
        "0.5.0"
      ]
    },
    "meta": {
      "type": "object",
      "description": "Additional metadata for future extensibility",
      "properties": {
        "template": {
          "type": "object",
          "description": "Template-related metadata",
          "properties": {
            "generator": {
              "type": "string",
              "description": "Tool or service that generated this IP from the template",
              "examples": [
                "vyges-cli",
                "cookiecutter",
                "github-template"
              ]
            },
            "init_tool": {
              "type": "string",
              "description": "Initialization tool used (e.g., vyges-cli, cookiecutter)",
              "examples": [
                "vyges-cli",
                "cookiecutter",
                "yo"
              ]
            },
            "template_version": {
              "type": "string",
              "description": "Version of the template when this IP was generated",
              "examples": [
                "1.0.0",
                "2.1.0"
              ]
            },
            "generated_at": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 timestamp when this IP was generated from the template",
              "examples": [
                "2024-01-15T10:30:00Z",
                "2023-12-01T09:15:00Z"
              ]
            }
          },
          "examples": [
            {
              "generator": "vyges-cli",
              "init_tool": "vyges-cli",
              "template_version": "1.0.0",
              "generated_at": "2024-01-15T10:30:00Z"
            }
          ]
        },
        "generated_by": {
          "type": "string",
          "description": "Tool or service that created this metadata file",
          "examples": [
            "vyges-cli",
            "manual",
            "github-action"
          ]
        },
        "schema": {
          "type": "object",
          "description": "Schema version and compatibility information",
          "properties": {
            "version": {
              "type": "string",
              "description": "Version of the vyges-metadata schema used",
              "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
              "examples": [
                "1.0.0",
                "0.1.0"
              ]
            },
            "compatible_versions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of compatible schema versions",
              "examples": [
                [
                  "1.0.0",
                  "1.1.0"
                ],
                [
                  "0.1.0",
                  "0.2.0"
                ]
              ]
            },
            "generated_with": {
              "type": "string",
              "description": "Tool that generated this metadata file",
              "examples": [
                "vyges-cli",
                "json-schema-generator"
              ]
            }
          },
          "required": [
            "version"
          ],
          "examples": [
            {
              "version": "1.0.0",
              "compatible_versions": [
                "1.0.0",
                "1.1.0"
              ],
              "generated_with": "vyges-cli"
            }
          ]
        }
      },
      "additionalProperties": true,
      "examples": [
        {
          "template": {
            "generator": "vyges-cli",
            "init_tool": "vyges-cli",
            "template_version": "1.0.0",
            "generated_at": "2024-01-15T10:30:00Z"
          },
          "generated_by": "vyges-cli",
          "schema": {
            "version": "1.0.0",
            "compatible_versions": [
              "1.0.0",
              "1.1.0"
            ],
            "generated_with": "vyges-cli"
          }
        }
      ]
    },
    "sourceFiles": {
      "type": "array",
      "description": "List of source RTL files constituting the IP block.",
      "items": {
        "type": "object",
        "required": [
          "path",
          "type",
          "owner",
          "version",
          "license"
        ],
        "properties": {
          "file_metadata": {
            "type": "object",
            "description": "Basic file information and metadata",
            "properties": {
              "path": {
                "type": "string",
                "description": "Relative path to the file."
              },
              "type": {
                "type": "string",
                "enum": [
                  "rtl",
                  "testbench",
                  "constraint",
                  "doc",
                  "header"
                ],
                "description": "File category."
              },
              "owner": {
                "type": "string",
                "description": "Maintainer or owner of this file."
              },
              "version": {
                "type": "string",
                "description": "Version or commit identifier of the file."
              },
              "license": {
                "type": "string",
                "description": "SPDX license identifier for this file."
              }
            }
          },
          "vendor_info": {
            "type": "object",
            "description": "Vendor information for the IP",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the vendor or organization"
              },
              "docs": {
                "type": "array",
                "description": "Documentation links from vendor.",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "datasheet",
                        "user_guide",
                        "api_ref",
                        "app_note",
                        "reference_manual",
                        "integration_guide",
                        "other"
                      ]
                    }
                  },
                  "required": [
                    "title",
                    "url"
                  ]
                }
              },
              "contact": {
                "type": "object",
                "description": "Contact information for vendor support",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Primary support email address"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Support page or contact form URL"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Support phone number (optional)"
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "email"
                    ]
                  },
                  {
                    "required": [
                      "url"
                    ]
                  }
                ]
              }
            },
            "required": [
              "name"
            ]
          },
          "organization": {
            "type": "object",
            "description": "File organization and logical grouping",
            "properties": {
              "block": {
                "type": "string",
                "description": "Logical block name or namespace this file belongs to. Used for organization and to avoid naming conflicts between different functional blocks within the same IP.",
                "examples": [
                  "spi",
                  "uart",
                  "memory",
                  "clock",
                  "reset"
                ]
              }
            }
          }
        }
      },
      "examples": [
        {
          "file_metadata": {
            "path": "rtl/spi_controller.sv",
            "type": "rtl",
            "owner": "vyges-team",
            "version": "1.0.0",
            "license": "Apache-2.0"
          },
          "organization": {
            "block": "spi"
          }
        },
        {
          "file_metadata": {
            "path": "rtl/third_party/uart_core.v",
            "type": "rtl",
            "owner": "acme-corp",
            "version": "2.1.0",
            "license": "MIT"
          },
          "vendor_info": {
            "name": "ACME Corporation",
            "docs": [
              {
                "title": "UART Core Datasheet",
                "url": "https://acme.com/docs/uart-core-datasheet.pdf",
                "type": "datasheet"
              },
              {
                "title": "UART Core User Guide",
                "url": "https://acme.com/docs/uart-core-user-guide.pdf",
                "type": "user_guide"
              }
            ],
            "contact": {
              "email": "support@acme.com",
              "url": "https://acme.com/support"
            }
          },
          "organization": {
            "block": "uart"
          }
        },
        {
          "file_metadata": {
            "path": "tb/spi_controller_tb.sv",
            "type": "testbench",
            "owner": "vyges-team",
            "version": "1.0.0",
            "license": "Apache-2.0"
          },
          "organization": {
            "block": "spi"
          }
        },
        {
          "file_metadata": {
            "path": "rtl/third_party/memory_controller.v",
            "type": "rtl",
            "owner": "memory-tech-inc",
            "version": "3.2.1",
            "license": "Proprietary"
          },
          "vendor_info": {
            "name": "Example Memory Technology Inc.",
            "docs": [
              {
                "title": "Memory Controller Reference Manual",
                "url": "https://example.com/docs/mc-ref-manual.pdf",
                "type": "reference_manual"
              },
              {
                "title": "Integration Guide for SoC Design",
                "url": "https://example.com/docs/mc-integration-guide.pdf",
                "type": "integration_guide"
              }
            ],
            "contact": {
              "email": "tech-support@example.com",
              "url": "https://example.com/support",
              "phone": "+1-555-0123"
            }
          },
          "organization": {
            "block": "memory"
          }
        }
      ]
    },
    "performance": {
      "type": "object",
      "description": "Performance characteristics and benchmarks",
      "properties": {
        "clock_frequency": {
          "type": "object",
          "description": "Clock frequency performance",
          "properties": {
            "value": {
              "type": "number",
              "description": "Frequency value"
            },
            "unit": {
              "type": "string",
              "description": "Frequency unit (e.g., MHz, GHz)",
              "examples": [
                "MHz",
                "GHz"
              ]
            },
            "description": {
              "type": "string",
              "description": "Description of the frequency measurement"
            },
            "measurement_type": {
              "type": "string",
              "enum": [
                "estimate",
                "actual",
                "NA",
                "other"
              ],
              "description": "Type of measurement",
              "default": "estimate"
            }
          },
          "required": [
            "value",
            "unit"
          ],
          "examples": [
            {
              "value": 100,
              "unit": "MHz",
              "description": "Maximum operating frequency",
              "measurement_type": "estimate"
            }
          ]
        },
        "area": {
          "type": "object",
          "description": "Area performance metrics",
          "properties": {
            "value": {
              "type": "number",
              "description": "Area value"
            },
            "unit": {
              "type": "string",
              "description": "Area unit (e.g., gates, mm\u00b2, \u03bcm\u00b2)",
              "examples": [
                "gates",
                "mm\u00b2",
                "\u03bcm\u00b2"
              ]
            },
            "description": {
              "type": "string",
              "description": "Description of the area measurement"
            },
            "measurement_type": {
              "type": "string",
              "enum": [
                "estimate",
                "actual",
                "NA",
                "other"
              ],
              "description": "Type of measurement",
              "default": "estimate"
            }
          },
          "required": [
            "value",
            "unit"
          ],
          "examples": [
            {
              "value": 50000,
              "unit": "gates",
              "description": "Estimated gate count for 1024-point FFT",
              "measurement_type": "estimate"
            }
          ]
        },
        "power": {
          "type": "object",
          "description": "Power consumption metrics",
          "properties": {
            "value": {
              "type": "number",
              "description": "Power value"
            },
            "unit": {
              "type": "string",
              "description": "Power unit (e.g., mW, W)",
              "examples": [
                "mW",
                "W"
              ]
            },
            "description": {
              "type": "string",
              "description": "Description of the power measurement"
            },
            "measurement_type": {
              "type": "string",
              "enum": [
                "estimate",
                "actual",
                "NA",
                "other"
              ],
              "description": "Type of measurement",
              "default": "estimate"
            }
          },
          "required": [
            "value",
            "unit"
          ],
          "examples": [
            {
              "value": 50,
              "unit": "mW",
              "description": "Estimated power consumption at 1GHz",
              "measurement_type": "estimate"
            }
          ]
        }
      },
      "examples": [
        {
          "clock_frequency": {
            "value": 100,
            "unit": "MHz",
            "description": "Maximum operating frequency",
            "measurement_type": "estimate"
          },
          "area": {
            "value": 50000,
            "unit": "gates",
            "description": "Estimated gate count for 1024-point FFT",
            "measurement_type": "estimate"
          },
          "power": {
            "value": 50,
            "unit": "mW",
            "description": "Estimated power consumption at 1GHz",
            "measurement_type": "estimate"
          }
        }
      ]
    },
    "target_pdks": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "PDKs this IP has been validated against (e.g., sky130B, gf180mcuC, ihp-sg13g2)",
      "examples": [
        [
          "sky130B",
          "gf180mcuC"
        ],
        [
          "sky130B"
        ],
        [
          "tsmc28",
          "gf12"
        ]
      ]
    },
    "trust_profile": {
      "type": "object",
      "description": "Security and trust indicators for the IP",
      "properties": {
        "reproducible_build": {
          "type": "boolean",
          "description": "Whether the build is reproducible from source",
          "examples": [
            true,
            false
          ]
        },
        "fuzzed": {
          "type": "boolean",
          "description": "Whether the IP has been fuzz tested",
          "examples": [
            true,
            false
          ]
        },
        "lint_clean": {
          "type": "boolean",
          "description": "Whether the IP passes linting checks",
          "examples": [
            true,
            false
          ]
        },
        "signed": {
          "type": "boolean",
          "description": "Whether the IP is cryptographically signed",
          "examples": [
            true,
            false
          ]
        }
      },
      "examples": [
        {
          "reproducible_build": true,
          "fuzzed": true,
          "lint_clean": true,
          "signed": false
        },
        {
          "reproducible_build": true,
          "lint_clean": true,
          "fuzzed": false,
          "signed": true
        }
      ]
    },
    "description": {
      "type": "string",
      "description": "Short description of what the IP block does",
      "examples": [
        "SPI master controller with configurable clock divider",
        "High-speed PCIe Gen4 PHY with encrypted RTL payload"
      ]
    },
    "toolRequirements": {
      "type": "object",
      "description": "Tool requirements for using this IP",
      "properties": {
        "simulation": {
          "type": "string",
          "description": "Required simulation tool (e.g., VCS, ModelSim, verilator)",
          "examples": [
            "verilator",
            "VCS",
            "ModelSim",
            "iverilog"
          ]
        },
        "synthesis": {
          "type": "string",
          "description": "Required synthesis tool (e.g., Design Compiler, OpenLane)",
          "examples": [
            "yosys",
            "Design Compiler",
            "OpenLane",
            "genus"
          ]
        },
        "physical": {
          "type": "string",
          "description": "Required physical design tool (e.g., Innovus, OpenLane)",
          "examples": [
            "openroad",
            "Innovus",
            "OpenLane",
            "icc"
          ]
        },
        "layout": {
          "type": "string",
          "description": "Required layout tool (e.g., Virtuoso, Magic)",
          "examples": [
            "magic",
            "Virtuoso",
            "klayout",
            "xschem"
          ]
        },
        "verification": {
          "type": "string",
          "description": "Required verification tool (e.g., Calibre, PVS)",
          "examples": [
            "calibre",
            "PVS",
            "klayout",
            "netgen"
          ]
        },
        "version_notes": {
          "type": "object",
          "description": "Optional version requirements and compatibility notes for tools",
          "additionalProperties": {
            "type": "string"
          },
          "examples": [
            {
              "verilator": "4.0+ for SystemVerilog, 5.0+ for latest optimizations",
              "yosys": "0.9+ for basic synthesis, 0.23+ for advanced features",
              "vivado": "2023.1+ recommended for latest features",
              "edalock": "See EDA Lock manifest for exact tool versions and reproducible builds"
            }
          ]
        },
        "notes": {
          "type": "string",
          "description": "Additional notes about tool requirements",
          "examples": [
            "Requires commercial tools for full functionality",
            "Open-source toolchain supported",
            "See README for detailed setup instructions"
          ]
        }
      },
      "examples": [
        {
          "simulation": "verilator",
          "synthesis": "yosys",
          "physical": "openroad",
          "layout": "magic",
          "verification": "netgen",
          "notes": "Open-source toolchain supported"
        },
        {
          "simulation": "VCS",
          "synthesis": "Design Compiler",
          "physical": "Innovus",
          "layout": "Virtuoso",
          "verification": "calibre",
          "version_notes": {
            "VCS": "2023.06+ required",
            "Design Compiler": "2023.03+ recommended"
          },
          "notes": "Requires commercial tools for full functionality"
        }
      ]
    },
    "design_type": {
      "type": "array",
      "description": "Design types this IP supports",
      "items": {
        "type": "string",
        "enum": [
          "digital",
          "analog",
          "mixed-signal",
          "hard-ip"
        ]
      },
      "minItems": 1,
      "examples": [
        [
          "digital"
        ],
        [
          "analog"
        ],
        [
          "mixed-signal"
        ],
        [
          "digital",
          "analog"
        ]
      ]
    },
    "integration": {
      "type": "object",
      "description": "Integration examples and wrappers",
      "properties": {
        "examples": {
          "type": "array",
          "description": "List of integration examples",
          "items": {
            "type": "object",
            "properties": {
              "target": {
                "type": "string",
                "enum": [
                  "simulation",
                  "fpga",
                  "asic"
                ],
                "description": "Target platform for the example",
                "examples": [
                  "simulation",
                  "fpga",
                  "asic"
                ]
              },
              "wrapper": {
                "type": "string",
                "description": "Path to wrapper file or module name",
                "examples": [
                  "examples/spi_wrapper.v",
                  "examples/fpga_wrapper.v",
                  "spi_top"
                ]
              },
              "tb": {
                "type": "string",
                "description": "Path to testbench file",
                "examples": [
                  "examples/spi_tb.v",
                  "test/spi_integration_tb.py",
                  "tb_spi.v"
                ]
              }
            },
            "examples": [
              {
                "target": "simulation",
                "wrapper": "examples/spi_wrapper.v",
                "tb": "examples/spi_tb.v"
              },
              {
                "target": "fpga",
                "wrapper": "examples/fpga_wrapper.v",
                "tb": "test/spi_integration_tb.py"
              }
            ]
          }
        }
      },
      "examples": [
        {
          "examples": [
            {
              "target": "simulation",
              "wrapper": "examples/spi_wrapper.v",
              "tb": "examples/spi_tb.v"
            },
            {
              "target": "fpga",
              "wrapper": "examples/fpga_wrapper.v",
              "tb": "test/spi_integration_tb.py"
            }
          ]
        }
      ]
    },
    "dependencies": {
      "type": "array",
      "description": "List of other IP blocks or libraries this IP depends on",
      "items": {
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "properties": {
          "dependency_info": {
            "type": "object",
            "description": "Basic dependency information and requirements",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the dependent IP or library",
                "examples": [
                  "openhw/apb-bridge",
                  "pulp-platform/common_cells",
                  "lowrisc/prim"
                ]
              },
              "version": {
                "type": "string",
                "description": "Required version range (e.g., ^1.2.0, >=2.0.0)",
                "examples": [
                  "^1.0.0",
                  ">=2.0.0",
                  "~1.2.0",
                  "1.0.0"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "ip",
                  "library",
                  "tool"
                ],
                "description": "Type of dependency",
                "examples": [
                  "ip",
                  "library",
                  "tool"
                ]
              },
              "optional": {
                "type": "boolean",
                "description": "Whether this dependency is optional",
                "default": false,
                "examples": [
                  true,
                  false
                ]
              }
            }
          },
          "source_management": {
            "type": "object",
            "description": "Source location and version control information",
            "properties": {
              "source": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "git",
                      "archive",
                      "registry"
                    ],
                    "examples": [
                      "git",
                      "archive",
                      "registry"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "examples": [
                      "https://github.com/openhwgroup/apb-bridge",
                      "https://github.com/pulp-platform/common_cells"
                    ]
                  },
                  "commit": {
                    "type": "string",
                    "examples": [
                      "a1b2c3d",
                      "main",
                      "v1.0.0"
                    ]
                  },
                  "hash": {
                    "type": "string",
                    "examples": [
                      "sha256:abc123...",
                      "sha256:def456..."
                    ]
                  },
                  "indexing": {
                    "type": "boolean",
                    "default": true,
                    "examples": [
                      true,
                      false
                    ]
                  }
                },
                "examples": [
                  {
                    "type": "git",
                    "url": "https://github.com/openhwgroup/apb-bridge",
                    "commit": "a1b2c3d",
                    "indexing": true
                  },
                  {
                    "type": "registry",
                    "url": "https://registry.vyges.com/ip/apb-bridge",
                    "indexing": false
                  }
                ]
              },
              "autoFetch": {
                "type": "boolean",
                "description": "Whether this dependency should be auto-downloaded by the Vyges CLI",
                "default": false,
                "examples": [
                  true,
                  false
                ]
              }
            }
          },
          "compliance": {
            "type": "object",
            "description": "License and attribution requirements",
            "properties": {
              "license": {
                "type": "string",
                "description": "SPDX identifier of the dependency's license",
                "examples": [
                  "Apache-2.0",
                  "CERN-OHL-S",
                  "MIT",
                  "GPL-3.0"
                ]
              },
              "attribution": {
                "type": "string",
                "description": "Required attribution text or URL if OSS license demands it",
                "examples": [
                  "Copyright 2024 OpenHW Group. Licensed under CERN-OHL-S.",
                  "Portions Copyright 2023 FOSSi Foundation"
                ]
              }
            }
          }
        },
        "examples": [
          {
            "dependency_info": {
              "name": "openhw/apb-bridge",
              "version": "^1.0.0",
              "type": "ip"
            },
            "source_management": {
              "source": {
                "type": "git",
                "url": "https://github.com/openhwgroup/apb-bridge",
                "commit": "a1b2c3d"
              },
              "autoFetch": true
            },
            "compliance": {
              "license": "CERN-OHL-S",
              "attribution": "Copyright 2024 OpenHW Group. Licensed under CERN-OHL-S."
            }
          },
          {
            "dependency_info": {
              "name": "pulp-platform/common_cells",
              "version": ">=1.0.0",
              "type": "library",
              "optional": true
            },
            "compliance": {
              "license": "Apache-2.0"
            }
          }
        ]
      },
      "examples": [
        [
          {
            "dependency_info": {
              "name": "openhw/apb-bridge",
              "version": "^1.0.0",
              "type": "ip"
            },
            "source_management": {
              "source": {
                "type": "git",
                "url": "https://github.com/openhwgroup/apb-bridge",
                "commit": "a1b2c3d"
              },
              "autoFetch": true
            },
            "compliance": {
              "license": "CERN-OHL-S",
              "attribution": "Copyright 2024 OpenHW Group. Licensed under CERN-OHL-S."
            }
          }
        ],
        [
          {
            "dependency_info": {
              "name": "pulp-platform/common_cells",
              "version": ">=1.0.0",
              "type": "library",
              "optional": true
            },
            "compliance": {
              "license": "Apache-2.0"
            }
          },
          {
            "dependency_info": {
              "name": "lowrisc/prim",
              "version": "~1.0.0",
              "type": "ip"
            },
            "source_management": {
              "source": {
                "type": "git",
                "url": "https://github.com/lowrisc/opentitan",
                "commit": "main"
              }
            },
            "compliance": {
              "license": "Apache-2.0"
            }
          }
        ]
      ]
    },
    "packaging": {
      "type": "object",
      "description": "Packaging and standard integration support",
      "properties": {
        "ipxact": {
          "type": "boolean",
          "description": "IP-XACT packaging compatibility",
          "examples": [
            true,
            false
          ]
        },
        "edalock": {
          "type": "boolean",
          "description": "EDA Lock manifest support (for reproducible toolchains). When true, an EDA Lock manifest file should be present in the IP package.",
          "examples": [
            true,
            false
          ]
        },
        "format": {
          "type": "string",
          "enum": [
            "verilog",
            "vhdl",
            "chisel",
            "spice",
            "ams",
            "mixed"
          ],
          "description": "Primary HDL format",
          "examples": [
            "verilog",
            "vhdl",
            "chisel",
            "spice",
            "ams",
            "mixed"
          ]
        }
      },
      "examples": [
        {
          "ipxact": true,
          "edalock": true,
          "format": "verilog"
        },
        {
          "ipxact": false,
          "edalock": true,
          "format": "vhdl"
        },
        {
          "ipxact": false,
          "edalock": false,
          "format": "spice"
        }
      ]
    },
    "compliance": {
      "type": "object",
      "description": "Security and compliance metadata",
      "properties": {
        "sbom": {
          "type": "string",
          "format": "uri",
          "description": "Link to Software Bill of Materials (SBOM)",
          "examples": [
            "https://github.com/vyges/spi-controller/blob/main/sbom.json",
            "https://acme.com/ip/sbom.xml"
          ]
        },
        "known_cves": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of known CVE IDs affecting this IP (if applicable)",
          "examples": [
            [],
            [
              "CVE-2023-1234"
            ],
            [
              "CVE-2023-5678",
              "CVE-2023-9012"
            ]
          ]
        },
        "threat_model": {
          "type": "string",
          "description": "Optional high-level threat model or attack surfaces",
          "examples": [
            "Side-channel attacks on cryptographic operations",
            "Timing attacks on memory access patterns",
            "Fault injection on control signals"
          ]
        }
      },
      "examples": [
        {
          "sbom": "https://github.com/vyges/spi-controller/blob/main/sbom.json",
          "known_cves": [],
          "threat_model": "Side-channel attacks on cryptographic operations"
        },
        {
          "sbom": "https://acme.com/ip/sbom.xml",
          "known_cves": [
            "CVE-2023-1234"
          ],
          "threat_model": "Timing attacks on memory access patterns"
        }
      ]
    },
    "localization": {
      "type": "object",
      "description": "Internationalization and localization support",
      "properties": {
        "supported_languages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of supported language codes (e.g., en, zh, ja)",
          "examples": [
            [
              "en"
            ],
            [
              "en",
              "zh"
            ],
            [
              "en",
              "zh",
              "ja",
              "ko"
            ]
          ]
        },
        "documentation_languages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Languages in which documentation is available",
          "examples": [
            [
              "en"
            ],
            [
              "en",
              "zh"
            ],
            [
              "en",
              "zh",
              "ja",
              "ko"
            ]
          ]
        },
        "localized_descriptions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Description in different languages",
          "examples": [
            {
              "en": "High-performance SPI controller with configurable parameters",
              "zh": "\u9ad8\u6027\u80fdSPI\u63a7\u5236\u5668\uff0c\u5177\u6709\u53ef\u914d\u7f6e\u53c2\u6570",
              "ja": "\u8a2d\u5b9a\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u9ad8\u6027\u80fdSPI\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc"
            },
            {
              "en": "PCIe PHY supporting multiple generations",
              "zh": "\u652f\u6301\u591a\u4ee3PCIe PHY",
              "ja": "\u8907\u6570\u306e\u4e16\u4ee3\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308bPCIe PHY"
            }
          ]
        }
      },
      "examples": [
        {
          "supported_languages": [
            "en",
            "zh"
          ],
          "documentation_languages": [
            "en",
            "zh"
          ],
          "localized_descriptions": {
            "en": "High-performance SPI controller with configurable parameters",
            "zh": "\u9ad8\u6027\u80fdSPI\u63a7\u5236\u5668\uff0c\u5177\u6709\u53ef\u914d\u7f6e\u53c2\u6570"
          }
        },
        {
          "supported_languages": [
            "en"
          ],
          "documentation_languages": [
            "en"
          ],
          "localized_descriptions": {
            "en": "PCIe PHY supporting multiple generations"
          }
        }
      ]
    },
    "security": {
      "type": "object",
      "description": "Security and safety-related metadata for RTL design validation",
      "$defs": {
        "riskArea": {
          "type": "string",
          "enum": [
            "memory_access",
            "fsm_state_control",
            "bus_protocol",
            "reset_glitch",
            "clock_domain_crossing",
            "side_channel",
            "input_overdrive",
            "address_decoding",
            "fifo_boundary",
            "signal_validation",
            "cryptographic_operations",
            "privilege_escalation",
            "data_integrity",
            "timing_attacks",
            "fault_injection"
          ]
        },
        "attackVector": {
          "type": "string",
          "enum": [
            "timing",
            "power",
            "electromagnetic",
            "fault_injection"
          ]
        },
        "securityLevel": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "flowType": {
          "type": "string",
          "enum": [
            "asic",
            "fpga",
            "chiplet",
            "analog"
          ]
        },
        "toolAvailability": {
          "type": "string",
          "enum": [
            "open_source",
            "commercial",
            "hybrid"
          ]
        },
        "assertionCoverage": {
          "type": "object",
          "description": "Security assertion coverage requirements",
          "properties": {
            "required_assertions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of required security assertions",
              "examples": [
                [
                  "address_bounds_check",
                  "fsm_state_validity",
                  "reset_synchronization"
                ],
                [
                  "protocol_timing",
                  "cdc_synchronization",
                  "side_channel_protection"
                ]
              ]
            },
            "coverage_target": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Target assertion coverage percentage",
              "examples": [
                90,
                95,
                98,
                100
              ]
            },
            "critical_paths": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Critical security paths that must be covered",
              "examples": [
                [
                  "memory_access_control",
                  "privilege_check",
                  "cryptographic_key_path"
                ],
                [
                  "reset_recovery",
                  "error_handling",
                  "state_transition_validation"
                ]
              ]
            }
          },
          "examples": [
            {
              "required_assertions": [
                "address_bounds_check",
                "fsm_state_validity"
              ],
              "coverage_target": 95,
              "critical_paths": [
                "memory_access_control",
                "reset_recovery"
              ]
            },
            {
              "required_assertions": [
                "protocol_timing",
                "cdc_synchronization"
              ],
              "coverage_target": 98,
              "critical_paths": [
                "cryptographic_key_path",
                "privilege_check"
              ]
            }
          ]
        },
        "fuzzingConfig": {
          "type": "object",
          "description": "Configuration for security-focused fuzzing tests",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether fuzzing tests should be generated",
              "examples": [
                true,
                false
              ]
            },
            "input_ranges": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "signal": {
                    "type": "string"
                  },
                  "min_value": {
                    "type": "integer"
                  },
                  "max_value": {
                    "type": "integer"
                  },
                  "include_invalid": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "signal",
                  "min_value",
                  "max_value"
                ]
              },
              "description": "Input signal ranges for fuzzing",
              "examples": [
                [
                  {
                    "signal": "addr",
                    "min_value": 0,
                    "max_value": 1023,
                    "include_invalid": true
                  },
                  {
                    "signal": "data",
                    "min_value": 0,
                    "max_value": 255,
                    "include_invalid": false
                  }
                ]
              ]
            },
            "test_duration": {
              "type": "integer",
              "description": "Duration of fuzzing tests in cycles",
              "examples": [
                1000,
                10000,
                100000
              ]
            },
            "mutation_strategy": {
              "type": "string",
              "enum": [
                "random",
                "directed",
                "coverage_guided"
              ],
              "description": "Fuzzing mutation strategy",
              "examples": [
                "random",
                "directed",
                "coverage_guided"
              ]
            }
          },
          "examples": [
            {
              "enabled": true,
              "input_ranges": [
                {
                  "signal": "addr",
                  "min_value": 0,
                  "max_value": 1023,
                  "include_invalid": true
                }
              ],
              "test_duration": 10000,
              "mutation_strategy": "random"
            }
          ]
        },
        "formalVerification": {
          "type": "object",
          "description": "Formal verification requirements for security properties",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether formal verification is required",
              "examples": [
                true,
                false
              ]
            },
            "security_properties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Security properties to be formally verified",
              "examples": [
                [
                  "no_illegal_memory_access",
                  "fsm_reachability",
                  "reset_recovery"
                ],
                [
                  "protocol_compliance",
                  "cdc_safety",
                  "side_channel_protection"
                ]
              ]
            },
            "tools": {
              "type": "object",
              "description": "Formal verification tools categorized by availability",
              "properties": {
                "open_source": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Open-source formal verification tools (references tools.{flow}.open_source.formal)",
                  "examples": [
                    [
                      "yosys-smtbmc",
                      "sby",
                      "symbiyosys",
                      "jtag"
                    ]
                  ]
                },
                "commercial": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Commercial formal verification tools (references tools.{flow}.commercial.formal)",
                  "examples": [
                    [
                      "oneSpin",
                      "jasper",
                      "vc_formal",
                      "questa_formal"
                    ]
                  ]
                }
              },
              "examples": [
                {
                  "open_source": [
                    "yosys-smtbmc",
                    "sby"
                  ],
                  "commercial": [
                    "oneSpin"
                  ]
                }
              ]
            },
            "timeout": {
              "type": "integer",
              "description": "Formal verification timeout in seconds",
              "examples": [
                300,
                600,
                1800
              ]
            }
          },
          "examples": [
            {
              "enabled": true,
              "security_properties": [
                "no_illegal_memory_access",
                "fsm_reachability"
              ],
              "tools": {
                "open_source": [
                  "yosys-smtbmc",
                  "sby"
                ],
                "commercial": []
              },
              "timeout": 600
            }
          ]
        }
      },
      "properties": {
        "meta": {
          "type": "object",
          "description": "Basic security configuration and metadata",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether security validation is enabled for this IP (disabled by default to lower barrier to entry)",
              "examples": [
                false,
                true
              ]
            },
            "security_level": {
              "$ref": "#/$defs/securityLevel",
              "description": "Severity or criticality of this IP from a security standpoint",
              "examples": [
                "low",
                "medium",
                "high",
                "critical"
              ]
            },
            "tool_availability": {
              "$ref": "#/$defs/toolAvailability",
              "description": "Preferred tool availability for security testing (open-source by default for accessibility)",
              "default": "open_source",
              "examples": [
                "open_source",
                "commercial",
                "hybrid"
              ]
            },
            "target_flow": {
              "$ref": "#/$defs/flowType",
              "description": "Target design flow for security tool selection (references tools.{flow})",
              "default": "fpga",
              "examples": [
                "fpga",
                "asic",
                "chiplet",
                "analog"
              ]
            }
          },
          "required": [
            "enabled"
          ]
        },
        "analysis": {
          "type": "object",
          "description": "Security risk analysis and protection features",
          "properties": {
            "risk_areas": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/riskArea"
              },
              "description": "Functional areas where security validation is critical",
              "examples": [
                [
                  "memory_access",
                  "fsm_state_control",
                  "reset_glitch"
                ],
                [
                  "bus_protocol",
                  "clock_domain_crossing",
                  "side_channel"
                ],
                [
                  "cryptographic_operations",
                  "timing_attacks",
                  "fault_injection"
                ]
              ]
            },
            "protection_features": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Security-related design features implemented in the IP",
              "examples": [
                [
                  "address_range_check",
                  "fsm_default_state",
                  "reset_assertion"
                ],
                [
                  "ecc_protection",
                  "parity_checking",
                  "crc_validation"
                ],
                [
                  "side_channel_protection",
                  "constant_time_operations",
                  "power_analysis_resistance"
                ]
              ]
            },
            "side_channel_analysis": {
              "type": "object",
              "description": "Side-channel analysis requirements and protections",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether side-channel analysis is required",
                  "examples": [
                    true,
                    false
                  ]
                },
                "attack_vectors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/attackVector"
                  },
                  "description": "Side-channel attack vectors to protect against",
                  "examples": [
                    [
                      "timing",
                      "power"
                    ],
                    [
                      "timing",
                      "power",
                      "electromagnetic",
                      "fault_injection"
                    ]
                  ]
                },
                "protection_mechanisms": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Implemented side-channel protection mechanisms",
                  "examples": [
                    [
                      "constant_time_operations",
                      "power_balancing"
                    ],
                    [
                      "randomization",
                      "shielding",
                      "fault_detection"
                    ]
                  ]
                },
                "analysis_tools": {
                  "type": "object",
                  "description": "Side-channel analysis tools categorized by availability",
                  "properties": {
                    "open_source": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source side-channel analysis tools (references tools.{flow}.open_source.security)",
                      "examples": [
                        [
                          "custom_python",
                          "numpy",
                          "scipy",
                          "chipwhisperer"
                        ]
                      ]
                    },
                    "commercial": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial side-channel analysis tools (references tools.{flow}.commercial.security)",
                      "examples": [
                        [
                          "secure_ic",
                          "rambus_dpa",
                          "rohde_schwarz"
                        ]
                      ]
                    }
                  },
                  "examples": [
                    {
                      "open_source": [
                        "custom_python",
                        "numpy"
                      ],
                      "commercial": [
                        "secure_ic"
                      ]
                    }
                  ]
                }
              },
              "examples": [
                {
                  "enabled": true,
                  "attack_vectors": [
                    "timing",
                    "power"
                  ],
                  "protection_mechanisms": [
                    "constant_time_operations",
                    "power_balancing"
                  ],
                  "analysis_tools": {
                    "open_source": [
                      "custom_python",
                      "numpy"
                    ],
                    "commercial": [
                      "secure_ic"
                    ]
                  }
                }
              ]
            }
          }
        },
        "validation": {
          "type": "object",
          "description": "Security validation and testing configuration",
          "properties": {
            "recommended_tests": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Suggested tests/assertions to validate security for this IP",
              "examples": [
                [
                  "assert_illegal_address_access",
                  "assert_fsm_stable_transitions",
                  "reset_glitch_simulation"
                ],
                [
                  "assert_protocol_timing",
                  "assert_cdc_synchronization",
                  "assert_side_channel_protection"
                ],
                [
                  "assert_cryptographic_operations",
                  "assert_timing_attack_resistance",
                  "assert_fault_injection_resistance"
                ]
              ]
            },
            "requires_secure_testbench": {
              "type": "boolean",
              "default": false,
              "description": "Whether this IP requires security-focused testbench generation",
              "examples": [
                true,
                false
              ]
            },
            "assertion_coverage": {
              "$ref": "#/$defs/assertionCoverage"
            },
            "fuzzing_config": {
              "$ref": "#/$defs/fuzzingConfig"
            },
            "formal_verification": {
              "$ref": "#/$defs/formalVerification"
            }
          }
        },
        "compliance": {
          "type": "object",
          "description": "Security compliance standards and documentation",
          "properties": {
            "compliance_standards": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "iso_26262",
                  "iec_61508",
                  "do_254",
                  "common_criteria",
                  "fips_140",
                  "nist_sp_800",
                  "iso_21434",
                  "custom"
                ]
              },
              "description": "Security compliance standards this IP adheres to",
              "examples": [
                [
                  "iso_26262",
                  "iec_61508"
                ],
                [
                  "fips_140",
                  "nist_sp_800"
                ],
                [
                  "iso_21434",
                  "custom"
                ]
              ]
            },
            "security_documentation": {
              "type": "object",
              "description": "Links to security-related documentation",
              "properties": {
                "security_analysis": {
                  "type": "string",
                  "format": "uri",
                  "description": "Link to security analysis report",
                  "examples": [
                    "https://github.com/vyges/spi-controller/blob/main/docs/security_analysis.md",
                    "https://acme.com/ip/security_analysis.pdf"
                  ]
                },
                "threat_model": {
                  "type": "string",
                  "format": "uri",
                  "description": "Link to detailed threat model",
                  "examples": [
                    "https://github.com/vyges/spi-controller/blob/main/docs/threat_model.md",
                    "https://acme.com/ip/threat_model.pdf"
                  ]
                },
                "penetration_testing": {
                  "type": "string",
                  "format": "uri",
                  "description": "Link to penetration testing results",
                  "examples": [
                    "https://github.com/vyges/spi-controller/blob/main/docs/penetration_testing.md",
                    "https://acme.com/ip/penetration_testing.pdf"
                  ]
                }
              },
              "examples": [
                {
                  "security_analysis": "https://github.com/vyges/spi-controller/blob/main/docs/security_analysis.md",
                  "threat_model": "https://github.com/vyges/spi-controller/blob/main/docs/threat_model.md"
                }
              ]
            }
          }
        }
      },
      "examples": [
        {
          "meta": {
            "enabled": true,
            "security_level": "high",
            "tool_availability": "open_source",
            "target_flow": "fpga"
          },
          "analysis": {
            "risk_areas": [
              "memory_access",
              "fsm_state_control",
              "reset_glitch"
            ],
            "protection_features": [
              "address_range_check",
              "fsm_default_state",
              "reset_assertion"
            ]
          },
          "validation": {
            "recommended_tests": [
              "assert_illegal_address_access",
              "assert_fsm_stable_transitions",
              "reset_glitch_simulation"
            ],
            "requires_secure_testbench": true,
            "assertion_coverage": {
              "required_assertions": [
                "address_bounds_check",
                "fsm_state_validity"
              ],
              "coverage_target": 95,
              "critical_paths": [
                "memory_access_control",
                "reset_recovery"
              ]
            },
            "fuzzing_config": {
              "enabled": true,
              "input_ranges": [
                {
                  "signal": "addr",
                  "min_value": 0,
                  "max_value": 1023,
                  "include_invalid": true
                }
              ],
              "test_duration": 10000,
              "mutation_strategy": "random"
            },
            "formal_verification": {
              "enabled": true,
              "security_properties": [
                "no_illegal_memory_access",
                "fsm_reachability"
              ],
              "tools": {
                "open_source": [
                  "yosys-smtbmc",
                  "sby"
                ],
                "commercial": []
              },
              "timeout": 600
            }
          },
          "compliance": {
            "compliance_standards": [
              "iso_26262",
              "iec_61508"
            ],
            "security_documentation": {
              "security_analysis": "https://github.com/vyges/spi-controller/blob/main/docs/security_analysis.md",
              "threat_model": "https://github.com/vyges/spi-controller/blob/main/docs/threat_model.md"
            }
          }
        },
        {
          "meta": {
            "enabled": true,
            "security_level": "critical",
            "tool_availability": "hybrid",
            "target_flow": "asic"
          },
          "analysis": {
            "risk_areas": [
              "cryptographic_operations",
              "timing_attacks",
              "fault_injection"
            ],
            "protection_features": [
              "side_channel_protection",
              "constant_time_operations",
              "power_analysis_resistance"
            ],
            "side_channel_analysis": {
              "enabled": true,
              "attack_vectors": [
                "timing",
                "power",
                "electromagnetic",
                "fault_injection"
              ],
              "protection_mechanisms": [
                "randomization",
                "shielding",
                "fault_detection"
              ],
              "analysis_tools": {
                "open_source": [
                  "chipwhisperer",
                  "numpy"
                ],
                "commercial": [
                  "secure_ic"
                ]
              }
            }
          },
          "validation": {
            "recommended_tests": [
              "assert_cryptographic_operations",
              "assert_timing_attack_resistance",
              "assert_fault_injection_resistance"
            ],
            "requires_secure_testbench": true,
            "formal_verification": {
              "enabled": true,
              "security_properties": [
                "cryptographic_key_integrity",
                "constant_time_operations"
              ],
              "tools": {
                "open_source": [
                  "yosys-smtbmc"
                ],
                "commercial": [
                  "oneSpin"
                ]
              },
              "timeout": 1800
            }
          },
          "compliance": {
            "compliance_standards": [
              "fips_140",
              "nist_sp_800"
            ],
            "security_documentation": {
              "security_analysis": "https://acme.com/ip/security_analysis.pdf",
              "threat_model": "https://acme.com/ip/threat_model.pdf",
              "penetration_testing": "https://acme.com/ip/penetration_testing.pdf"
            }
          }
        }
      ]
    },
    "license": {
      "type": "string",
      "description": "SPDX-compatible license identifier (e.g., Apache-2.0, MIT, CERN-OHL-S)",
      "examples": [
        "Apache-2.0",
        "MIT",
        "CERN-OHL-S",
        "GPL-3.0",
        "Proprietary"
      ]
    },
    "flows": {
      "type": "object",
      "description": "Design flow verification status for different tools and processes",
      "properties": {
        "simulation_tools": {
          "type": "object",
          "description": "Simulation and verification tool status",
          "properties": {
            "verilator": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "verified",
                    "partial",
                    "failed",
                    "untested"
                  ],
                  "description": "Verilator simulation and linting status",
                  "examples": [
                    "verified",
                    "partial",
                    "untested"
                  ]
                }
              },
              "required": [
                "status"
              ],
              "examples": [
                {
                  "status": "verified"
                },
                {
                  "status": "partial"
                }
              ]
            }
          }
        },
        "synthesis_tools": {
          "type": "object",
          "description": "Synthesis and implementation tool status",
          "properties": {
            "openlane": {
              "type": "object",
              "properties": {
                "pdks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of PDKs tested with OpenLane (e.g., sky130B, gf180mcuC, ihp-sg13g2)",
                  "examples": [
                    [
                      "sky130B",
                      "gf180mcuC"
                    ],
                    [
                      "sky130B"
                    ],
                    [
                      "ihp-sg13g2"
                    ]
                  ]
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "tested",
                    "partial",
                    "failed",
                    "untested"
                  ],
                  "description": "OpenLane synthesis and place-and-route status",
                  "examples": [
                    "tested",
                    "partial",
                    "untested"
                  ]
                }
              },
              "required": [
                "status"
              ],
              "examples": [
                {
                  "pdks": [
                    "sky130B",
                    "gf180mcuC",
                    "ihp-sg13g2"
                  ],
                  "status": "tested"
                },
                {
                  "pdks": [
                    "sky130B"
                  ],
                  "status": "partial"
                }
              ]
            },
            "vivado": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "verified",
                    "partial",
                    "failed",
                    "untested"
                  ],
                  "description": "Xilinx Vivado synthesis and implementation status",
                  "examples": [
                    "verified",
                    "partial",
                    "untested"
                  ]
                }
              },
              "required": [
                "status"
              ],
              "examples": [
                {
                  "status": "verified"
                },
                {
                  "status": "partial"
                }
              ]
            }
          }
        }
      },
      "examples": [
        {
          "simulation_tools": {
            "verilator": {
              "status": "verified"
            }
          },
          "synthesis_tools": {
            "openlane": {
              "pdks": [
                "sky130B",
                "gf180mcuC",
                "ihp-sg13g2"
              ],
              "status": "tested"
            },
            "vivado": {
              "status": "verified"
            }
          }
        },
        {
          "simulation_tools": {
            "verilator": {
              "status": "partial"
            }
          },
          "synthesis_tools": {
            "openlane": {
              "pdks": [
                "sky130B"
              ],
              "status": "partial"
            }
          }
        }
      ]
    },
    "chiplet": {
      "type": "object",
      "description": "Comprehensive chiplet metadata specification with CDXML/BoW/AIB/UCIe compliance, security lifecycle management, discovery composition, test validation, and advanced packaging specifications",
      "$defs": {
        "voltage_spec": {
          "type": "object",
          "description": "Voltage specification with core and I/O voltages",
          "properties": {
            "core_voltage": {
              "type": "number",
              "description": "Core operating voltage in volts"
            },
            "io_voltage": {
              "type": "number",
              "description": "I/O operating voltage in volts"
            }
          }
        },
        "current_spec": {
          "type": "object",
          "description": "Current specification with maximum and leakage currents",
          "properties": {
            "max_current_ma": {
              "type": "number",
              "description": "Maximum current draw in milliamps"
            },
            "leakage_ma": {
              "type": "number",
              "description": "Typical leakage current in milliamps"
            }
          }
        },
        "electrical_characteristics": {
          "type": "object",
          "description": "Combined electrical characteristics",
          "allOf": [
            {
              "$ref": "#/$defs/voltage_spec"
            },
            {
              "$ref": "#/$defs/current_spec"
            }
          ]
        },
        "dimensions": {
          "type": "object",
          "description": "Physical dimensions in micrometers",
          "properties": {
            "die_width_um": {
              "type": "number",
              "description": "Die width in micrometers"
            },
            "die_height_um": {
              "type": "number",
              "description": "Die height in micrometers"
            }
          }
        },
        "bump_spec": {
          "type": "object",
          "description": "Bump specifications for chiplet integration",
          "properties": {
            "bump_pitch_um": {
              "type": "number",
              "description": "Bump pitch in micrometers"
            },
            "substrate_type": {
              "type": "string",
              "enum": [
                "organic",
                "silicon",
                "glass",
                "ceramic"
              ],
              "description": "Substrate material type"
            }
          }
        },
        "mechanical_characteristics": {
          "type": "object",
          "description": "Combined mechanical characteristics",
          "allOf": [
            {
              "$ref": "#/$defs/dimensions"
            },
            {
              "$ref": "#/$defs/bump_spec"
            }
          ]
        },
        "compliance_checklist": {
          "type": "object",
          "description": "Standard compliance checklist items",
          "properties": {
            "known_good_die": {
              "type": "boolean",
              "description": "Whether die has been tested and verified as known-good"
            },
            "reticle_compatible": {
              "type": "boolean",
              "description": "Whether die is compatible with standard reticle formats"
            },
            "has_dft_hooks": {
              "type": "boolean",
              "description": "Whether die includes design-for-test hooks"
            },
            "test_vector_included": {
              "type": "boolean",
              "description": "Whether test vectors are included with the die"
            },
            "thermal_model_available": {
              "type": "boolean",
              "description": "Whether thermal model is available for analysis"
            },
            "power_model_available": {
              "type": "boolean",
              "description": "Whether power model is available for analysis"
            },
            "d2d_loopback_coverage": {
              "type": "boolean",
              "description": "Whether die-to-die loopback testing is covered"
            }
          }
        },
        "validation_status": {
          "type": "object",
          "description": "Validation status and tool information",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "not_validated",
                "in_progress",
                "validated",
                "failed"
              ],
              "description": "Validation status"
            },
            "date": {
              "type": "string",
              "format": "date",
              "description": "Date when validation was completed"
            },
            "tool": {
              "type": "string",
              "description": "Tool used for validation"
            }
          }
        },
        "bow_signaling": {
          "type": "object",
          "description": "BoW signaling characteristics",
          "properties": {
            "signaling_class": {
              "type": "string",
              "enum": [
                "A",
                "B",
                "C",
                "D"
              ],
              "description": "BoW signaling class"
            },
            "tx_voltage": {
              "type": "number",
              "description": "Transmit voltage in volts"
            },
            "rx_voltage": {
              "type": "number",
              "description": "Receive voltage in volts"
            },
            "clocking_scheme": {
              "type": "string",
              "enum": [
                "forwarded",
                "embedded",
                "recovered"
              ],
              "description": "Clock distribution scheme"
            },
            "link_training": {
              "type": "boolean",
              "description": "Whether link training is supported"
            },
            "protocol_layer": {
              "type": "string",
              "enum": [
                "raw",
                "packetized",
                "streaming"
              ],
              "description": "Protocol layer type"
            },
            "serialization_factor": {
              "type": "integer",
              "minimum": 1,
              "description": "Serialization factor"
            }
          }
        },
        "bow_timing": {
          "type": "object",
          "description": "BoW timing constraints",
          "properties": {
            "setup_time_ps": {
              "type": "number",
              "description": "Setup time in picoseconds"
            },
            "hold_time_ps": {
              "type": "number",
              "description": "Hold time in picoseconds"
            },
            "max_jitter_ps": {
              "type": "number",
              "description": "Maximum jitter in picoseconds"
            },
            "skew_tolerance_ps": {
              "type": "number",
              "description": "Skew tolerance in picoseconds"
            }
          }
        },
        "bow_compliance_features": {
          "type": "object",
          "description": "BoW compliance features",
          "properties": {
            "has_loopback": {
              "type": "boolean",
              "description": "Whether loopback testing is supported"
            },
            "supports_prbs": {
              "type": "boolean",
              "description": "Whether PRBS testing is supported"
            },
            "supports_inband_error_detect": {
              "type": "boolean",
              "description": "Whether in-band error detection is supported"
            },
            "supports_eye_monitoring": {
              "type": "boolean",
              "description": "Whether eye monitoring is supported"
            },
            "supports_jitter_tolerance": {
              "type": "boolean",
              "description": "Whether jitter tolerance testing is supported"
            }
          }
        },
        "power_domain": {
          "type": "object",
          "description": "Power domain configuration",
          "properties": {
            "name": {
              "type": "string"
            },
            "voltage": {
              "type": "number"
            },
            "type": {
              "type": "string",
              "enum": [
                "logic",
                "memory",
                "analog",
                "io",
                "mixed"
              ]
            },
            "isolation_required": {
              "type": "boolean"
            },
            "retention_required": {
              "type": "boolean"
            },
            "max_current_ma": {
              "type": "number"
            },
            "description": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "voltage"
          ]
        },
        "interposer_constraints": {
          "type": "object",
          "description": "Interposer design constraints",
          "properties": {
            "technology": {
              "type": "string",
              "enum": [
                "silicon",
                "organic",
                "glass"
              ],
              "description": "Interposer technology type"
            },
            "routing_layers": {
              "type": "integer",
              "minimum": 1,
              "description": "Number of routing layers required"
            },
            "minimum_pitch": {
              "type": "number",
              "description": "Minimum routing pitch in micrometers"
            },
            "die_spacing": {
              "type": "number",
              "description": "Minimum spacing between dies in millimeters"
            }
          }
        },
        "bump_constraints": {
          "type": "object",
          "description": "Bump map and connectivity constraints",
          "properties": {
            "pitch": {
              "type": "number",
              "description": "Bump pitch in micrometers"
            },
            "size": {
              "type": "number",
              "description": "Bump size in micrometers"
            },
            "array": {
              "type": "string",
              "enum": [
                "full",
                "peripheral",
                "area"
              ],
              "description": "Bump array configuration"
            },
            "power_bumps": {
              "type": "integer",
              "description": "Number of power/ground bumps required"
            },
            "signal_bumps": {
              "type": "integer",
              "description": "Number of signal bumps required"
            }
          }
        },
        "thermal_constraints": {
          "type": "object",
          "description": "Thermal analysis constraints",
          "properties": {
            "max_power_per_die": {
              "type": "number",
              "description": "Maximum power per die in watts"
            },
            "junction_temperature": {
              "type": "number",
              "description": "Maximum junction temperature in Celsius"
            },
            "thermal_resistance": {
              "type": "number",
              "description": "Thermal resistance in degrees C per watt"
            },
            "cooling_requirements": {
              "type": "string",
              "description": "Cooling requirements description"
            }
          }
        },
        "chiplet_descriptor": {
          "type": "object",
          "description": "Core chiplet identification and process information",
          "properties": {
            "name": {
              "type": "string",
              "description": "Unique chiplet identifier"
            },
            "version": {
              "type": "string",
              "description": "Chiplet version string"
            },
            "foundry": {
              "type": "string",
              "description": "Manufacturing foundry (e.g., GF, TSMC, Samsung)"
            },
            "process_node_nm": {
              "type": "number",
              "description": "Process node in nanometers (e.g., 40, 65, 180)"
            },
            "pdk_id": {
              "type": "string",
              "description": "Process Design Kit identifier with version"
            },
            "die_size_mm": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "minItems": 2,
              "maxItems": 2,
              "description": "Die dimensions [width, height] in millimeters"
            },
            "bump_pitch_um": {
              "type": "number",
              "description": "Microbump pitch in micrometers"
            },
            "voltage_domains": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of voltage domains for power management"
            }
          }
        },
        "interface_specification": {
          "type": "object",
          "description": "Complete interface specification for die-to-die communication",
          "properties": {
            "role": {
              "type": "string",
              "description": "Interface role (e.g., die_to_die_0, memory_interface)"
            },
            "phy": {
              "type": "object",
              "description": "Physical layer interface specifications",
              "properties": {
                "standard": {
                  "type": "string",
                  "enum": [
                    "AIB",
                    "BoW",
                    "UCIe"
                  ],
                  "description": "Interface standard"
                },
                "version": {
                  "type": "string",
                  "description": "Standard version number"
                },
                "mode": {
                  "type": "string",
                  "description": "Signaling mode (e.g., parallel_source_sync)"
                },
                "lanes_tx": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Number of transmit lanes"
                },
                "lanes_rx": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Number of receive lanes"
                },
                "data_rate_gbps_per_lane": {
                  "type": "number",
                  "description": "Data rate per lane in Gbps"
                },
                "io_voltage": {
                  "type": "string",
                  "description": "I/O voltage level"
                },
                "termination": {
                  "type": "string",
                  "enum": [
                    "on_die",
                    "external"
                  ],
                  "description": "Termination scheme"
                },
                "training": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Training sequence requirements"
                },
                "loopback": {
                  "type": "boolean",
                  "description": "Loopback capability availability"
                },
                "error_detection": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Error detection mechanisms"
                },
                "power_pJ_per_bit": {
                  "type": "number",
                  "description": "Power per bit in picojoules"
                },
                "reach_mm": {
                  "type": "number",
                  "description": "Maximum reach in millimeters"
                },
                "bump_map_ref": {
                  "type": "string",
                  "description": "Reference to bump map artifact"
                }
              }
            },
            "link": {
              "type": "object",
              "description": "Link layer protocol specifications",
              "properties": {
                "protocol": {
                  "type": "string",
                  "enum": [
                    "PCIe",
                    "CXL",
                    "STREAMING",
                    "CUSTOM"
                  ],
                  "description": "Link protocol"
                },
                "width_bits": {
                  "type": "integer",
                  "description": "Total link width in bits"
                },
                "flow_control": {
                  "type": "string",
                  "description": "Flow control mechanism"
                },
                "replay": {
                  "type": "boolean",
                  "description": "Replay capability"
                },
                "fec": {
                  "type": "string",
                  "description": "Forward error correction"
                },
                "max_payload_bytes": {
                  "type": "integer",
                  "description": "Maximum payload size in bytes"
                }
              }
            },
            "management": {
              "type": "object",
              "description": "System management and discovery specifications",
              "properties": {
                "discovery": {
                  "type": "string",
                  "enum": [
                    "CDXML"
                  ],
                  "description": "Discovery protocol"
                },
                "endpoint_id": {
                  "type": "string",
                  "description": "Unique endpoint identifier"
                },
                "config_bus": {
                  "type": "string",
                  "description": "Configuration bus specification"
                },
                "firmware_update": {
                  "type": "object",
                  "description": "Firmware update mechanism",
                  "properties": {
                    "method": {
                      "type": "string",
                      "enum": [
                        "in_band",
                        "out_of_band"
                      ],
                      "description": "Update method"
                    },
                    "format": {
                      "type": "string",
                      "description": "Firmware format"
                    },
                    "secure_boot": {
                      "type": "boolean",
                      "description": "Secure boot capability"
                    },
                    "rot_block": {
                      "type": "string",
                      "description": "Root of trust block"
                    }
                  }
                },
                "telemetry": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Available telemetry data"
                }
              }
            }
          }
        },
        "interfaces": {
          "type": "array",
          "description": "Array of interface specifications for die-to-die communication",
          "items": {
            "$ref": "#/$defs/interface_specification"
          }
        },
        "packaging": {
          "type": "object",
          "description": "Packaging and assembly specifications",
          "properties": {
            "assembly": {
              "type": "string",
              "enum": [
                "organic_substrate",
                "2.5D_interposer",
                "fanout"
              ],
              "description": "Assembly type"
            },
            "substrate_stackup": {
              "type": "string",
              "description": "Substrate stackup reference"
            },
            "thermal": {
              "type": "object",
              "description": "Thermal characteristics",
              "properties": {
                "theta_ja_c_per_w": {
                  "type": "number",
                  "description": "Thermal resistance from junction to ambient"
                },
                "max_tj_c": {
                  "type": "number",
                  "description": "Maximum junction temperature in Celsius"
                }
              }
            },
            "power_delivery": {
              "type": "object",
              "description": "Power delivery network specifications",
              "properties": {
                "rails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "imax_a": {
                        "type": "number"
                      },
                      "dvdt_limit_mV_us": {
                        "type": "number"
                      },
                      "seq": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "decap_guidance": {
                  "type": "string",
                  "description": "Decoupling capacitor guidance"
                }
              }
            }
          }
        },
        "enhanced_packaging": {
          "type": "object",
          "description": "Enhanced packaging specifications for mechanical and assembly teams",
          "properties": {
            "mechanical_constraints": {
              "type": "object",
              "description": "Mechanical and physical constraints",
              "properties": {
                "die_thickness_um": {
                  "type": "number"
                },
                "warpage_limit_um": {
                  "type": "number"
                },
                "co_planarity": {
                  "type": "string"
                },
                "die_size_tolerance": {
                  "type": "string"
                },
                "bump_height_um": {
                  "type": "number"
                },
                "bump_diameter_um": {
                  "type": "number"
                },
                "bump_pitch_tolerance": {
                  "type": "string"
                }
              }
            },
            "assembly_requirements": {
              "type": "object",
              "description": "Assembly and manufacturing requirements",
              "properties": {
                "pick_and_place_accuracy": {
                  "type": "string"
                },
                "reflow_profile": {
                  "type": "string"
                },
                "underfill_material": {
                  "type": "string"
                },
                "bonding_temperature": {
                  "type": "string"
                },
                "bonding_pressure": {
                  "type": "string"
                }
              }
            },
            "interposer_specifications": {
              "type": "object",
              "description": "Interposer and substrate specifications",
              "properties": {
                "interposer_material": {
                  "type": "string"
                },
                "interposer_thickness_um": {
                  "type": "number"
                },
                "routing_layers": {
                  "type": "integer"
                },
                "minimum_feature_size_um": {
                  "type": "number"
                },
                "via_diameter_um": {
                  "type": "number"
                },
                "metal_stack": {
                  "type": "string"
                }
              }
            },
            "thermal_management": {
              "type": "object",
              "description": "Thermal management specifications",
              "properties": {
                "thermal_interface_material": {
                  "type": "string"
                },
                "heat_spreader": {
                  "type": "string"
                },
                "thermal_vias": {
                  "type": "string"
                },
                "junction_to_case_resistance": {
                  "type": "string"
                },
                "case_to_ambient_resistance": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security_lifecycle": {
          "type": "object",
          "description": "Security and lifecycle management specifications",
          "properties": {
            "secure_boot": {
              "type": "object",
              "description": "Secure boot capability and configuration",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "method": {
                  "type": "string"
                },
                "key_storage": {
                  "type": "string"
                },
                "verification": {
                  "type": "string"
                }
              }
            },
            "attestation": {
              "type": "object",
              "description": "Attestation and identity management",
              "properties": {
                "attestation_block": {
                  "type": "string"
                },
                "attestation_method": {
                  "type": "string"
                },
                "measurement_capability": {
                  "type": "boolean"
                },
                "quote_generation": {
                  "type": "boolean"
                }
              }
            },
            "firmware_authentication": {
              "type": "object",
              "description": "Firmware authentication mechanisms",
              "properties": {
                "method": {
                  "type": "string"
                },
                "key_management": {
                  "type": "string"
                },
                "version_control": {
                  "type": "string"
                },
                "integrity_checking": {
                  "type": "string"
                }
              }
            },
            "revocation_policy": {
              "type": "object",
              "description": "Revocation and lifecycle management",
              "properties": {
                "method": {
                  "type": "string"
                },
                "revocation_list": {
                  "type": "string"
                },
                "update_mechanism": {
                  "type": "string"
                },
                "rollback_protection": {
                  "type": "string"
                }
              }
            }
          }
        },
        "discovery_composition": {
          "type": "object",
          "description": "Discovery, composition, and system integration specifications",
          "properties": {
            "chiplet_uuid": {
              "type": "string",
              "format": "uuid",
              "description": "Globally unique chiplet identifier"
            },
            "dependencies": {
              "type": "object",
              "description": "External dependencies and requirements",
              "properties": {
                "power_rails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "voltage": {
                        "type": "string"
                      },
                      "current_max": {
                        "type": "number"
                      },
                      "required": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "clock_sources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "frequency_mhz": {
                        "type": "number"
                      },
                      "jitter_ps_rms": {
                        "type": "number"
                      },
                      "required": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "thermal_requirements": {
                  "type": "object",
                  "properties": {
                    "max_junction_temp_c": {
                      "type": "number"
                    },
                    "thermal_resistance_c_per_w": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "capabilities": {
              "type": "object",
              "description": "Chiplet capabilities and provided services",
              "properties": {
                "interface_capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "lanes": {
                        "type": "integer"
                      },
                      "data_rate_gbps_per_lane": {
                        "type": "number"
                      },
                      "voltage": {
                        "type": "string"
                      }
                    }
                  }
                },
                "compute_capabilities": {
                  "type": "object",
                  "properties": {
                    "core_type": {
                      "type": "string"
                    },
                    "performance_dmips_mhz": {
                      "type": "number"
                    },
                    "memory_interface": {
                      "type": "string"
                    }
                  }
                },
                "security_capabilities": {
                  "type": "object",
                  "properties": {
                    "secure_boot": {
                      "type": "boolean"
                    },
                    "attestation": {
                      "type": "boolean"
                    },
                    "crypto_engines": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "test_validation": {
          "type": "object",
          "description": "Test, validation, and bring-up specifications",
          "properties": {
            "loopback_modes": {
              "type": "object",
              "description": "Available loopback testing modes",
              "properties": {
                "internal_loopback": {
                  "type": "boolean"
                },
                "external_loopback": {
                  "type": "boolean"
                },
                "pattern_generation": {
                  "type": "string"
                },
                "error_injection": {
                  "type": "string"
                }
              }
            },
            "prbs_support": {
              "type": "object",
              "description": "PRBS pattern generation and checking",
              "properties": {
                "patterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "generation": {
                  "type": "string"
                },
                "checking": {
                  "type": "string"
                },
                "error_counting": {
                  "type": "string"
                }
              }
            },
            "bist_hooks": {
              "type": "object",
              "description": "Built-in self-test capabilities",
              "properties": {
                "memory_bist": {
                  "type": "string"
                },
                "logic_bist": {
                  "type": "string"
                },
                "analog_bist": {
                  "type": "string"
                },
                "boundary_scan": {
                  "type": "string"
                }
              }
            },
            "error_counters": {
              "type": "object",
              "description": "Error monitoring and counting capabilities",
              "properties": {
                "bit_errors": {
                  "type": "string"
                },
                "symbol_errors": {
                  "type": "string"
                },
                "crc_errors": {
                  "type": "string"
                },
                "parity_errors": {
                  "type": "string"
                },
                "timeout_errors": {
                  "type": "string"
                }
              }
            }
          }
        },
        "enhanced_compliance": {
          "type": "object",
          "description": "Enhanced compliance tracking with granular validation",
          "properties": {
            "cdxml_compliance": {
              "type": "object",
              "description": "CDXML compliance tracking and validation",
              "properties": {
                "version": {
                  "type": "string"
                },
                "protocol_support": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "electrical_validation": {
                  "type": "string"
                },
                "mechanical_validation": {
                  "type": "string"
                },
                "validation_tracking": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tool": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      },
                      "result": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date"
                      },
                      "validation_details": {
                        "type": "string"
                      },
                      "constraints_verified": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "aib_compliance": {
              "type": "object",
              "description": "AIB compliance tracking and validation",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "spec_version": {
                  "type": "string"
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "validation_tracking": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/validation_status"
                  }
                }
              }
            },
            "ucie_compliance": {
              "type": "object",
              "description": "UCIe compliance tracking and validation",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "spec_version": {
                  "type": "string"
                },
                "profile": {
                  "type": "string"
                },
                "protocol_modes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "validation_tracking": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/validation_status"
                  }
                }
              }
            },
            "overall_compliance_status": {
              "type": "object",
              "description": "Overall compliance status and summary",
              "properties": {
                "cdxml_status": {
                  "type": "string"
                },
                "aib_status": {
                  "type": "string"
                },
                "bow_status": {
                  "type": "string"
                },
                "ucie_status": {
                  "type": "string"
                },
                "last_validation_date": {
                  "type": "string",
                  "format": "date"
                },
                "compliance_score": {
                  "type": "string"
                },
                "next_validation_due": {
                  "type": "string",
                  "format": "date"
                },
                "validation_team": {
                  "type": "string"
                },
                "certification_status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "properties": {
        "compliance": {
          "type": "object",
          "description": "Standards compliance foundation (CDXML/BoW) - required for interoperability",
          "required": [
            "cdxml",
            "bow_specification"
          ],
          "properties": {
            "cdxml": {
              "type": "object",
              "description": "CDXML (Chiplet Design Exchange Format) compliance for OCP integration",
              "required": [
                "version",
                "interface",
                "electrical",
                "mechanical",
                "checklist"
              ],
              "properties": {
                "version": {
                  "type": "string",
                  "description": "CDXML specification version this chiplet complies with",
                  "examples": [
                    "cdxml-v0.1",
                    "cdxml-v0.2",
                    "cdxml-v1.0"
                  ]
                },
                "interface": {
                  "type": "object",
                  "description": "Die-to-die interface characteristics per CDXML specification",
                  "required": [
                    "type",
                    "lanes",
                    "data_rate_gbps"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "BoW",
                        "UCIe",
                        "AIB",
                        "EMIB",
                        "custom"
                      ],
                      "description": "Interface protocol type"
                    },
                    "lanes": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Number of interface lanes"
                    },
                    "tx_pads": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Number of transmit pads"
                    },
                    "rx_pads": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Number of receive pads"
                    },
                    "data_rate_gbps": {
                      "type": "number",
                      "description": "Data rate per lane in Gbps"
                    }
                  },
                  "examples": [
                    {
                      "type": "BoW",
                      "lanes": 8,
                      "tx_pads": 32,
                      "rx_pads": 32,
                      "data_rate_gbps": 8.0
                    },
                    {
                      "type": "UCIe",
                      "lanes": 16,
                      "tx_pads": 64,
                      "rx_pads": 64,
                      "data_rate_gbps": 16.0
                    }
                  ]
                },
                "electrical": {
                  "$ref": "#/$defs/electrical_characteristics",
                  "examples": [
                    {
                      "core_voltage": 0.8,
                      "io_voltage": 1.2,
                      "max_current_ma": 120,
                      "leakage_ma": 4.5
                    }
                  ]
                },
                "mechanical": {
                  "$ref": "#/$defs/mechanical_characteristics",
                  "examples": [
                    {
                      "die_width_um": 4000,
                      "die_height_um": 3000,
                      "bump_pitch_um": 100,
                      "substrate_type": "organic"
                    }
                  ]
                },
                "checklist": {
                  "$ref": "#/$defs/compliance_checklist",
                  "examples": [
                    {
                      "known_good_die": true,
                      "reticle_compatible": true,
                      "has_dft_hooks": true,
                      "test_vector_included": true,
                      "thermal_model_available": true,
                      "power_model_available": true,
                      "d2d_loopback_coverage": true
                    }
                  ]
                },
                "validation": {
                  "$ref": "#/$defs/validation_status",
                  "examples": [
                    {
                      "status": "validated",
                      "date": "2024-01-15",
                      "tool": "CDXML Validator v0.2"
                    }
                  ]
                }
              }
            },
            "bow_specification": {
              "type": "object",
              "description": "BoW (Bunch of Wires) specification details",
              "required": [
                "spec_version",
                "signaling",
                "timing"
              ],
              "properties": {
                "spec_version": {
                  "type": "string",
                  "description": "BoW specification version"
                },
                "signaling": {
                  "$ref": "#/$defs/bow_signaling",
                  "examples": [
                    {
                      "signaling_class": "B",
                      "tx_voltage": 0.4,
                      "rx_voltage": 0.4,
                      "clocking_scheme": "forwarded",
                      "link_training": true,
                      "protocol_layer": "raw",
                      "serialization_factor": 8
                    }
                  ]
                },
                "timing": {
                  "$ref": "#/$defs/bow_timing",
                  "examples": [
                    {
                      "setup_time_ps": 50,
                      "hold_time_ps": 50,
                      "max_jitter_ps": 10,
                      "skew_tolerance_ps": 25
                    }
                  ]
                },
                "compliance": {
                  "$ref": "#/$defs/bow_compliance_features",
                  "examples": [
                    {
                      "has_loopback": true,
                      "supports_prbs": true,
                      "supports_inband_error_detect": true,
                      "supports_eye_monitoring": true,
                      "supports_jitter_tolerance": true
                    }
                  ]
                }
              }
            }
          }
        },
        "extensions": {
          "type": "object",
          "description": "Vendor-specific extensions and customizations beyond standards",
          "properties": {
            "meta": {
              "type": "object",
              "description": "Basic chiplet configuration and integration metadata",
              "properties": {
                "chiplet_ready": {
                  "type": "boolean",
                  "description": "Whether this IP is designed for chiplet integration",
                  "default": false
                },
                "integration_level": {
                  "type": "string",
                  "enum": [
                    "rtl",
                    "netlist",
                    "hard_ip"
                  ],
                  "description": "Integration abstraction level for chiplet design"
                },
                "die_to_die_interfaces": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ucie",
                      "bow",
                      "aib",
                      "emib",
                      "custom"
                    ]
                  },
                  "description": "Supported die-to-die interface protocols"
                }
              },
              "examples": [
                {
                  "chiplet_ready": true,
                  "integration_level": "rtl",
                  "die_to_die_interfaces": [
                    "ucie",
                    "bow"
                  ]
                }
              ]
            },
            "testing": {
              "type": "object",
              "description": "Custom testing and validation requirements beyond standards",
              "properties": {
                "multi_die_testing": {
                  "type": "object",
                  "description": "Multi-die testing and validation requirements",
                  "properties": {
                    "test_access": {
                      "type": "string",
                      "enum": [
                        "boundary_scan",
                        "internal_access",
                        "functional"
                      ],
                      "description": "Test access method"
                    },
                    "test_coverage": {
                      "type": "object",
                      "properties": {
                        "interconnect": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "description": "Interconnect test coverage percentage"
                        },
                        "functionality": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 100,
                          "description": "Functional test coverage percentage"
                        }
                      }
                    },
                    "test_vectors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of test vector files or formats"
                    }
                  },
                  "examples": [
                    {
                      "test_access": "boundary_scan",
                      "test_coverage": {
                        "interconnect": 95,
                        "functionality": 90
                      },
                      "test_vectors": [
                        "interconnect_test.v",
                        "functional_test.v"
                      ]
                    }
                  ]
                },
                "signal_conformance": {
                  "type": "object",
                  "description": "Signal and protocol conformance validation",
                  "properties": {
                    "protocol_reference": {
                      "type": "string",
                      "description": "Protocol specification version and reference"
                    },
                    "verified_against": {
                      "type": "boolean",
                      "description": "Whether interface was verified against protocol test suite"
                    },
                    "test_suite": {
                      "type": "string",
                      "description": "Name and version of test suite used for verification"
                    },
                    "verification_date": {
                      "type": "string",
                      "format": "date",
                      "description": "Date when protocol verification was completed"
                    },
                    "verification_tool": {
                      "type": "string",
                      "description": "Tool used for protocol verification"
                    },
                    "compliance_level": {
                      "type": "string",
                      "enum": [
                        "basic",
                        "full",
                        "extended"
                      ],
                      "description": "Level of protocol compliance achieved"
                    }
                  },
                  "examples": [
                    {
                      "protocol_reference": "UCIe 1.1",
                      "verified_against": true,
                      "test_suite": "UCIe Compliance Test Suite v1.1",
                      "verification_date": "2024-01-15",
                      "verification_tool": "UCIe Compliance Checker",
                      "compliance_level": "full"
                    }
                  ]
                }
              }
            },
            "lifecycle": {
              "type": "object",
              "description": "Supply chain and manufacturing metadata beyond standards",
              "properties": {
                "origin": {
                  "type": "string",
                  "description": "Origin of the chiplet (e.g., vyges/partner-x, internal)"
                },
                "trusted_fabricator": {
                  "type": "boolean",
                  "description": "Whether this chiplet comes from a trusted fabricator"
                },
                "version_control": {
                  "type": "string",
                  "enum": [
                    "git",
                    "svn",
                    "perforce",
                    "none"
                  ],
                  "description": "Version control system used"
                },
                "release_status": {
                  "type": "string",
                  "enum": [
                    "development",
                    "alpha",
                    "beta",
                    "qualified",
                    "production",
                    "deprecated"
                  ],
                  "description": "Release status in the supply chain"
                },
                "fabrication_node": {
                  "type": "string",
                  "description": "Fabrication process node"
                },
                "package_type": {
                  "type": "string",
                  "enum": [
                    "2.5d_interposer",
                    "3d_stacked",
                    "organic_substrate",
                    "fan_out"
                  ],
                  "description": "Package type for chiplet integration"
                },
                "supply_chain_tracking": {
                  "type": "boolean",
                  "description": "Whether supply chain is tracked and verified"
                },
                "certification": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of certifications (e.g., ISO 9001, automotive)"
                }
              },
              "examples": [
                {
                  "origin": "vyges/partner-x",
                  "trusted_fabricator": true,
                  "version_control": "git",
                  "release_status": "qualified",
                  "fabrication_node": "tsmc7nm",
                  "package_type": "2.5d_interposer",
                  "supply_chain_tracking": true,
                  "certification": [
                    "ISO 9001",
                    "IATF 16949"
                  ]
                }
              ]
            },
            "custom_electrical": {
              "type": "object",
              "description": "Vendor-specific electrical characteristics beyond standards",
              "properties": {
                "power_domains": {
                  "type": "array",
                  "description": "Power domain configuration for SoC/Chiplet partitioning",
                  "items": {
                    "$ref": "#/$defs/power_domain"
                  },
                  "examples": [
                    {
                      "name": "core_pd",
                      "voltage": 0.8,
                      "type": "logic",
                      "isolation_required": true,
                      "max_current_ma": 100,
                      "description": "Core logic domain"
                    }
                  ]
                }
              }
            },
            "custom_physical": {
              "type": "object",
              "description": "Vendor-specific physical constraints beyond standards",
              "properties": {
                "packaging_considerations": {
                  "type": "string",
                  "description": "Notes about physical packaging requirements"
                },
                "interposer_constraints": {
                  "$ref": "#/$defs/interposer_constraints"
                },
                "bump_constraints": {
                  "$ref": "#/$defs/bump_constraints"
                },
                "thermal_constraints": {
                  "$ref": "#/$defs/thermal_constraints"
                }
              }
            }
          }
        },
        "interfaces": {
          "type": "array",
          "description": "Array of interface specifications for die-to-die communication",
          "items": {
            "$ref": "#/$defs/interface_specification"
          }
        },
        "packaging": {
          "type": "object",
          "description": "Packaging and assembly specifications",
          "properties": {
            "assembly": {
              "type": "string",
              "enum": [
                "organic_substrate",
                "2.5D_interposer",
                "fanout"
              ],
              "description": "Assembly type"
            },
            "substrate_stackup": {
              "type": "string",
              "description": "Substrate stackup reference"
            },
            "thermal": {
              "type": "object",
              "description": "Thermal characteristics",
              "properties": {
                "theta_ja_c_per_w": {
                  "type": "number",
                  "description": "Thermal resistance from junction to ambient"
                },
                "max_tj_c": {
                  "type": "number",
                  "description": "Maximum junction temperature in Celsius"
                }
              }
            },
            "power_delivery": {
              "type": "object",
              "description": "Power delivery network specifications",
              "properties": {
                "rails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "imax_a": {
                        "type": "number"
                      },
                      "dvdt_limit_mV_us": {
                        "type": "number"
                      },
                      "seq": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "decap_guidance": {
                  "type": "string",
                  "description": "Decoupling capacitor guidance"
                }
              }
            }
          }
        },
        "enhanced_packaging": {
          "type": "object",
          "description": "Enhanced packaging specifications for mechanical and assembly teams",
          "properties": {
            "mechanical_constraints": {
              "type": "object",
              "description": "Mechanical and physical constraints",
              "properties": {
                "die_thickness_um": {
                  "type": "number"
                },
                "warpage_limit_um": {
                  "type": "number"
                },
                "co_planarity": {
                  "type": "string"
                },
                "die_size_tolerance": {
                  "type": "string"
                },
                "bump_height_um": {
                  "type": "number"
                },
                "bump_diameter_um": {
                  "type": "number"
                },
                "bump_pitch_tolerance": {
                  "type": "string"
                }
              }
            },
            "assembly_requirements": {
              "type": "object",
              "description": "Assembly and manufacturing requirements",
              "properties": {
                "pick_and_place_accuracy": {
                  "type": "string"
                },
                "reflow_profile": {
                  "type": "string"
                },
                "underfill_material": {
                  "type": "string"
                },
                "bonding_temperature": {
                  "type": "string"
                },
                "bonding_pressure": {
                  "type": "string"
                }
              }
            },
            "interposer_specifications": {
              "type": "object",
              "description": "Interposer and substrate specifications",
              "properties": {
                "interposer_material": {
                  "type": "string"
                },
                "interposer_thickness_um": {
                  "type": "number"
                },
                "routing_layers": {
                  "type": "integer"
                },
                "minimum_feature_size_um": {
                  "type": "number"
                },
                "via_diameter_um": {
                  "type": "number"
                },
                "metal_stack": {
                  "type": "string"
                }
              }
            },
            "thermal_management": {
              "type": "object",
              "description": "Thermal management specifications",
              "properties": {
                "thermal_interface_material": {
                  "type": "string"
                },
                "heat_spreader": {
                  "type": "string"
                },
                "thermal_vias": {
                  "type": "string"
                },
                "junction_to_case_resistance": {
                  "type": "string"
                },
                "case_to_ambient_resistance": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security_lifecycle": {
          "type": "object",
          "description": "Security and lifecycle management specifications",
          "properties": {
            "secure_boot": {
              "type": "object",
              "description": "Secure boot capability and configuration",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "method": {
                  "type": "string"
                },
                "key_storage": {
                  "type": "string"
                },
                "verification": {
                  "type": "string"
                }
              }
            },
            "attestation": {
              "type": "object",
              "description": "Attestation and identity management",
              "properties": {
                "attestation_block": {
                  "type": "string"
                },
                "attestation_method": {
                  "type": "string"
                },
                "measurement_capability": {
                  "type": "boolean"
                },
                "quote_generation": {
                  "type": "boolean"
                }
              }
            },
            "firmware_authentication": {
              "type": "object",
              "description": "Firmware authentication mechanisms",
              "properties": {
                "method": {
                  "type": "string"
                },
                "key_management": {
                  "type": "string"
                },
                "version_control": {
                  "type": "string"
                },
                "integrity_checking": {
                  "type": "string"
                }
              }
            },
            "revocation_policy": {
              "type": "object",
              "description": "Revocation and lifecycle management",
              "properties": {
                "method": {
                  "type": "string"
                },
                "revocation_list": {
                  "type": "string"
                },
                "update_mechanism": {
                  "type": "string"
                },
                "rollback_protection": {
                  "type": "string"
                }
              }
            }
          }
        },
        "discovery_composition": {
          "type": "object",
          "description": "Discovery, composition, and system integration specifications",
          "properties": {
            "chiplet_uuid": {
              "type": "string",
              "format": "uuid",
              "description": "Globally unique chiplet identifier"
            },
            "dependencies": {
              "type": "object",
              "description": "External dependencies and requirements",
              "properties": {
                "power_rails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "voltage": {
                        "type": "string"
                      },
                      "current_max": {
                        "type": "number"
                      },
                      "required": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "clock_sources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "frequency_mhz": {
                        "type": "number"
                      },
                      "jitter_ps_rms": {
                        "type": "number"
                      },
                      "required": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "thermal_requirements": {
                  "type": "object",
                  "properties": {
                    "max_junction_temp_c": {
                      "type": "number"
                    },
                    "thermal_resistance_c_per_w": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "capabilities": {
              "type": "object",
              "description": "Chiplet capabilities and provided services",
              "properties": {
                "interface_capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "lanes": {
                        "type": "integer"
                      },
                      "data_rate_gbps_per_lane": {
                        "type": "number"
                      },
                      "voltage": {
                        "type": "string"
                      }
                    }
                  }
                },
                "compute_capabilities": {
                  "type": "object",
                  "properties": {
                    "core_type": {
                      "type": "string"
                    },
                    "performance_dmips_mhz": {
                      "type": "number"
                    },
                    "memory_interface": {
                      "type": "string"
                    }
                  }
                },
                "security_capabilities": {
                  "type": "object",
                  "properties": {
                    "secure_boot": {
                      "type": "boolean"
                    },
                    "attestation": {
                      "type": "boolean"
                    },
                    "crypto_engines": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "test_validation": {
          "type": "object",
          "description": "Test, validation, and bring-up specifications",
          "properties": {
            "loopback_modes": {
              "type": "object",
              "description": "Available loopback testing modes",
              "properties": {
                "internal_loopback": {
                  "type": "boolean"
                },
                "external_loopback": {
                  "type": "boolean"
                },
                "pattern_generation": {
                  "type": "string"
                },
                "error_injection": {
                  "type": "string"
                }
              }
            },
            "prbs_support": {
              "type": "object",
              "description": "PRBS pattern generation and checking",
              "properties": {
                "patterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "generation": {
                  "type": "string"
                },
                "checking": {
                  "type": "string"
                },
                "error_counting": {
                  "type": "string"
                }
              }
            },
            "bist_hooks": {
              "type": "object",
              "description": "Built-in self-test capabilities",
              "properties": {
                "memory_bist": {
                  "type": "string"
                },
                "logic_bist": {
                  "type": "string"
                },
                "analog_bist": {
                  "type": "string"
                },
                "boundary_scan": {
                  "type": "string"
                }
              }
            },
            "error_counters": {
              "type": "object",
              "description": "Error monitoring and counting capabilities",
              "properties": {
                "bit_errors": {
                  "type": "string"
                },
                "symbol_errors": {
                  "type": "string"
                },
                "crc_errors": {
                  "type": "string"
                },
                "parity_errors": {
                  "type": "string"
                },
                "timeout_errors": {
                  "type": "string"
                }
              }
            }
          }
        },
        "enhanced_compliance": {
          "type": "object",
          "description": "Enhanced compliance tracking with granular validation",
          "properties": {
            "cdxml_compliance": {
              "type": "object",
              "description": "CDXML compliance tracking and validation",
              "properties": {
                "version": {
                  "type": "string"
                },
                "protocol_support": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "electrical_validation": {
                  "type": "string"
                },
                "mechanical_validation": {
                  "type": "string"
                },
                "validation_tracking": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tool": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      },
                      "result": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date"
                      },
                      "validation_details": {
                        "type": "string"
                      },
                      "constraints_verified": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "aib_compliance": {
              "type": "object",
              "description": "AIB compliance tracking and validation",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "spec_version": {
                  "type": "string"
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "validation_tracking": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/validation_status"
                  }
                }
              }
            },
            "ucie_compliance": {
              "type": "object",
              "description": "UCIe compliance tracking and validation",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "spec_version": {
                  "type": "string"
                },
                "profile": {
                  "type": "string"
                },
                "protocol_modes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "validation_tracking": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/validation_status"
                  }
                }
              }
            },
            "overall_compliance_status": {
              "type": "object",
              "description": "Overall compliance status and summary",
              "properties": {
                "cdxml_status": {
                  "type": "string"
                },
                "bow_status": {
                  "type": "string"
                },
                "aib_status": {
                  "type": "string"
                },
                "ucie_status": {
                  "type": "string"
                },
                "last_validation_date": {
                  "type": "string",
                  "format": "date"
                },
                "compliance_score": {
                  "type": "string"
                },
                "next_validation_due": {
                  "type": "string",
                  "format": "date"
                },
                "validation_team": {
                  "type": "string"
                },
                "certification_status": {
                  "type": "string"
                }
              }
            }
          }
        },
        "compatibility_rules": {
          "type": "object",
          "description": "Machine-readable rules for automated compatibility checking",
          "properties": {
            "interface_compatibility_rules": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "rule_id": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "string",
                    "enum": [
                      "critical",
                      "warning",
                      "info"
                    ]
                  },
                  "error_message": {
                    "type": "string"
                  }
                }
              }
            },
            "mechanical_compatibility_rules": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "rule_id": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "string",
                    "enum": [
                      "critical",
                      "warning",
                      "info"
                    ]
                  },
                  "error_message": {
                    "type": "string"
                  }
                }
              }
            },
            "protocol_compatibility_rules": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "rule_id": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "string",
                    "enum": [
                      "critical",
                      "warning",
                      "info"
                    ]
                  },
                  "error_message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "composition_engine": {
          "type": "object",
          "description": "Automated chiplet composition and system integration engine",
          "properties": {
            "auto_matching_capabilities": {
              "type": "object",
              "description": "Automated matching between chiplets",
              "properties": {
                "interface_matching": {
                  "type": "string"
                },
                "power_matching": {
                  "type": "string"
                },
                "thermal_matching": {
                  "type": "string"
                },
                "performance_matching": {
                  "type": "string"
                }
              }
            },
            "system_composition_rules": {
              "type": "object",
              "description": "Rules for composing complete chiplet systems",
              "properties": {
                "minimum_system_requirements": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "optimal_composition_guidelines": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "integration_validation": {
              "type": "object",
              "description": "Automated validation of chiplet system integration",
              "properties": {
                "electrical_validation": {
                  "type": "string"
                },
                "mechanical_validation": {
                  "type": "string"
                },
                "thermal_validation": {
                  "type": "string"
                },
                "performance_validation": {
                  "type": "string"
                },
                "security_validation": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "examples": [
        {
          "compliance": {
            "cdxml": {
              "version": "cdxml-v0.2",
              "interface": {
                "type": "BoW",
                "lanes": 8,
                "tx_pads": 32,
                "rx_pads": 32,
                "data_rate_gbps": 8.0
              },
              "electrical": {
                "core_voltage": 0.8,
                "io_voltage": 1.2,
                "max_current_ma": 120,
                "leakage_ma": 4.5
              },
              "mechanical": {
                "die_width_um": 4000,
                "die_height_um": 3000,
                "bump_pitch_um": 100,
                "substrate_type": "organic"
              },
              "checklist": {
                "known_good_die": true,
                "reticle_compatible": true,
                "has_dft_hooks": true,
                "test_vector_included": true,
                "thermal_model_available": true,
                "power_model_available": true,
                "d2d_loopback_coverage": true
              },
              "validation": {
                "status": "validated",
                "date": "2024-01-15",
                "tool": "CDXML Validator v0.2"
              }
            },
            "bow_specification": {
              "spec_version": "2.0d.1",
              "signaling": {
                "signaling_class": "B",
                "tx_voltage": 0.4,
                "rx_voltage": 0.4,
                "clocking_scheme": "forwarded",
                "link_training": true,
                "protocol_layer": "raw",
                "serialization_factor": 8
              },
              "timing": {
                "setup_time_ps": 50,
                "hold_time_ps": 50,
                "max_jitter_ps": 10,
                "skew_tolerance_ps": 25
              },
              "compliance": {
                "has_loopback": true,
                "supports_prbs": true,
                "supports_inband_error_detect": true,
                "supports_eye_monitoring": true,
                "supports_jitter_tolerance": true
              }
            }
          },
          "extensions": {
            "meta": {
              "chiplet_ready": true,
              "integration_level": "rtl",
              "die_to_die_interfaces": [
                "ucie",
                "bow"
              ]
            },
            "lifecycle": {
              "origin": "vyges/partner-x",
              "trusted_fabricator": true,
              "fabrication_node": "tsmc7nm",
              "package_type": "2.5d_interposer"
            }
          },
          "interfaces": [
            {
              "role": "die_to_die_0",
              "phy": {
                "standard": "AIB",
                "version": "2.0",
                "mode": "parallel_source_sync",
                "lanes_tx": 64,
                "lanes_rx": 64,
                "data_rate_gbps_per_lane": 1.0,
                "io_voltage": "1.2V",
                "termination": "on_die",
                "training": [
                  "deskew",
                  "prbs"
                ],
                "loopback": true,
                "error_detection": [
                  "crc"
                ],
                "power_pJ_per_bit": 0.8,
                "reach_mm": 8,
                "bump_map_ref": "aib_ring_v1"
              },
              "link": {
                "protocol": "STREAMING",
                "width_bits": 256,
                "flow_control": "credit",
                "replay": false,
                "fec": "none",
                "max_payload_bytes": 256
              },
              "management": {
                "discovery": "CDXML",
                "endpoint_id": "0x1A2B",
                "config_bus": "I2C@0x54",
                "firmware_update": {
                  "method": "in_band",
                  "format": "CSIP-v1",
                  "secure_boot": true,
                  "rot_block": "caliptra_v0.7"
                },
                "telemetry": [
                  "temperature",
                  "lane_error_counters"
                ]
              }
            }
          ],
          "packaging": {
            "assembly": "2.5D_interposer",
            "substrate_stackup": "pkg_stack_v3",
            "thermal": {
              "theta_ja_c_per_w": 18,
              "max_tj_c": 110
            },
            "power_delivery": {
              "rails": [
                {
                  "name": "1.2V_CORE",
                  "imax_a": 0.6,
                  "dvdt_limit_mV_us": 20,
                  "seq": 1
                },
                {
                  "name": "1.8V_IO",
                  "imax_a": 0.3,
                  "seq": 2
                }
              ],
              "decap_guidance": "min 1nF/mm2 near AIB ring"
            }
          },
          "enhanced_compliance": {
            "cdxml_compliance": {
              "version": "cdxml-v0.2",
              "protocol_support": [
                "AIB",
                "BoW",
                "UCIe",
                "EMIB"
              ],
              "electrical_validation": "OCP-ODSA-2025Q1",
              "mechanical_validation": "OCP-ODSA-2025Q1"
            },
            "aib_compliance": {
              "enabled": true,
              "spec_version": "2.0",
              "features": [
                "gearboxing",
                "prbs",
                "loopback"
              ]
            },
            "ucie_compliance": {
              "enabled": false,
              "spec_version": "1.1",
              "profile": "ShortReach",
              "protocol_modes": [
                "PCIe",
                "CXL",
                "STREAMING"
              ]
            }
          }
        }
      ]
    },
    "documentation": {
      "type": "object",
      "description": "Documentation links and resources",
      "properties": {
        "readme": {
          "type": "string",
          "format": "uri",
          "description": "URL to the main README file",
          "examples": [
            "https://github.com/vyges/spi-controller/blob/main/README.md",
            "https://docs.vyges.com/spi-controller"
          ]
        },
        "datasheet": {
          "type": "string",
          "format": "uri",
          "description": "URL to the datasheet or technical specification",
          "examples": [
            "https://docs.vyges.com/spi-controller/datasheet.pdf",
            "https://acme.com/pcie-phy/datasheet"
          ]
        },
        "user_guide": {
          "type": "string",
          "format": "uri",
          "description": "URL to the user guide or manual",
          "examples": [
            "https://docs.vyges.com/spi-controller/user-guide",
            "https://acme.com/pcie-phy/manual"
          ]
        },
        "api_docs": {
          "type": "string",
          "format": "uri",
          "description": "URL to API documentation",
          "examples": [
            "https://docs.vyges.com/spi-controller/api",
            "https://acme.com/pcie-phy/api"
          ]
        }
      },
      "examples": [
        {
          "readme": "https://github.com/vyges/spi-controller/blob/main/README.md",
          "datasheet": "https://docs.vyges.com/spi-controller/datasheet.pdf",
          "user_guide": "https://docs.vyges.com/spi-controller/user-guide",
          "api_docs": "https://docs.vyges.com/spi-controller/api"
        },
        {
          "readme": "https://github.com/acme/pcie-phy-encrypted/blob/main/README.md",
          "datasheet": "https://acme.com/pcie-phy/datasheet"
        }
      ]
    },
    "name": {
      "type": "string",
      "description": "Unique package name, typically in the format 'namespace/ip-name'",
      "examples": [
        "vyges/spi-controller",
        "acme/pcie-phy",
        "openhw/cva6"
      ]
    },
    "parameters": {
      "type": "array",
      "description": "Parameterizable configuration fields",
      "items": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "parameter_info": {
            "type": "object",
            "description": "Basic parameter information and type",
            "properties": {
              "name": {
                "type": "string",
                "description": "Parameter name as used in the RTL",
                "examples": [
                  "CLOCK_DIV",
                  "DATA_WIDTH",
                  "ENABLE_FEATURE",
                  "FREQUENCY_MHZ"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "int",
                  "bool",
                  "string",
                  "real"
                ],
                "description": "Parameter data type",
                "examples": [
                  "int",
                  "bool",
                  "string",
                  "real"
                ]
              },
              "description": {
                "type": "string",
                "description": "Human-readable description of the parameter's purpose",
                "examples": [
                  "Clock divider for SPI clock generation",
                  "Enable advanced features",
                  "Target frequency in MHz"
                ]
              }
            }
          },
          "constraints": {
            "type": "object",
            "description": "Parameter constraints and validation rules",
            "properties": {
              "default": {
                "description": "Default value for the parameter",
                "examples": [
                  8,
                  true,
                  "default_value",
                  100.5
                ]
              },
              "range": {
                "type": "object",
                "properties": {
                  "min": {
                    "description": "Minimum allowed value",
                    "examples": [
                      2,
                      0,
                      1.0
                    ]
                  },
                  "max": {
                    "description": "Maximum allowed value",
                    "examples": [
                      256,
                      100,
                      1000.0
                    ]
                  },
                  "step": {
                    "description": "Step size for numeric parameters",
                    "examples": [
                      1,
                      0.1,
                      10
                    ]
                  }
                },
                "description": "Valid range for the parameter",
                "examples": [
                  {
                    "min": 2,
                    "max": 256,
                    "step": 1
                  },
                  {
                    "min": 0,
                    "max": 100
                  },
                  {
                    "min": 1.0,
                    "max": 1000.0,
                    "step": 0.1
                  }
                ]
              },
              "required": {
                "type": "boolean",
                "description": "Whether this parameter is required",
                "default": false,
                "examples": [
                  true,
                  false
                ]
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional parameter metadata and units",
            "properties": {
              "units": {
                "type": "string",
                "description": "Units for the parameter (e.g., MHz, bits, cycles)",
                "examples": [
                  "cycles",
                  "bits",
                  "MHz",
                  "ns",
                  "bytes"
                ]
              }
            }
          }
        },
        "examples": [
          {
            "parameter_info": {
              "name": "CLOCK_DIV",
              "type": "int",
              "description": "Clock divider for SPI clock generation"
            },
            "constraints": {
              "default": 8,
              "range": {
                "min": 2,
                "max": 256
              },
              "required": false
            },
            "metadata": {
              "units": "cycles"
            }
          },
          {
            "parameter_info": {
              "name": "DATA_WIDTH",
              "type": "int",
              "description": "Data width for SPI transactions"
            },
            "constraints": {
              "default": 8,
              "range": {
                "min": 1,
                "max": 32
              },
              "required": true
            },
            "metadata": {
              "units": "bits"
            }
          }
        ]
      },
      "examples": [
        [
          {
            "parameter_info": {
              "name": "CLOCK_DIV",
              "type": "int",
              "description": "Clock divider for SPI clock generation"
            },
            "constraints": {
              "default": 8,
              "range": {
                "min": 2,
                "max": 256
              },
              "required": false
            },
            "metadata": {
              "units": "cycles"
            }
          },
          {
            "parameter_info": {
              "name": "DATA_WIDTH",
              "type": "int",
              "description": "Data width for SPI transactions"
            },
            "constraints": {
              "default": 8,
              "range": {
                "min": 1,
                "max": 32
              },
              "required": true
            },
            "metadata": {
              "units": "bits"
            }
          }
        ]
      ]
    },
    "tools": {
      "type": "object",
      "description": "Comprehensive tool categorization for different design flows and security testing",
      "properties": {
        "meta": {
          "type": "object",
          "description": "Basic tool configuration and metadata",
          "properties": {
            "tool_availability": {
              "type": "string",
              "enum": [
                "open_source_only",
                "commercial_only",
                "hybrid",
                "custom"
              ],
              "description": "Primary tool availability strategy",
              "examples": [
                "open_source_only",
                "hybrid",
                "commercial_only"
              ]
            },
            "primary_flow": {
              "type": "string",
              "enum": [
                "asic",
                "fpga",
                "chiplet",
                "analog",
                "mixed_signal"
              ],
              "description": "Primary design flow focus",
              "examples": [
                "asic",
                "fpga",
                "mixed_signal"
              ]
            },
            "tool_validation": {
              "type": "boolean",
              "description": "Whether tools have been validated for this IP",
              "examples": [
                true,
                false
              ]
            }
          }
        },
        "design_flows": {
          "type": "object",
          "description": "Design flow tools organized by technology domain",
          "properties": {
            "asic": {
              "type": "object",
              "description": "ASIC design and verification tools",
              "properties": {
                "open_source": {
                  "type": "object",
                  "description": "Open-source ASIC tools",
                  "properties": {
                    "synthesis": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source synthesis tools",
                      "examples": [
                        [
                          "yosys",
                          "abc"
                        ],
                        [
                          "yosys"
                        ]
                      ]
                    },
                    "place_route": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source place and route tools",
                      "examples": [
                        [
                          "openroad",
                          "tritonroute"
                        ],
                        [
                          "openroad"
                        ]
                      ]
                    },
                    "layout": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source layout tools",
                      "examples": [
                        [
                          "magic",
                          "klayout"
                        ],
                        [
                          "magic"
                        ]
                      ]
                    },
                    "drc_lvs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source DRC/LVS tools",
                      "examples": [
                        [
                          "magic",
                          "netgen"
                        ],
                        [
                          "magic"
                        ]
                      ]
                    }
                  }
                },
                "commercial": {
                  "type": "object",
                  "description": "Commercial ASIC tools",
                  "properties": {
                    "synthesis": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial synthesis tools",
                      "examples": [
                        [
                          "design_compiler",
                          "synplify"
                        ],
                        [
                          "design_compiler"
                        ]
                      ]
                    },
                    "place_route": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial place and route tools",
                      "examples": [
                        [
                          "ic_compiler",
                          "innovus"
                        ],
                        [
                          "ic_compiler"
                        ]
                      ]
                    },
                    "layout": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial layout tools",
                      "examples": [
                        [
                          "virtuoso",
                          "laker"
                        ],
                        [
                          "virtuoso"
                        ]
                      ]
                    },
                    "drc_lvs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial DRC/LVS tools",
                      "examples": [
                        [
                          "calibre",
                          "hercules"
                        ],
                        [
                          "calibre"
                        ]
                      ]
                    }
                  }
                }
              }
            },
            "fpga": {
              "type": "object",
              "description": "FPGA design and verification tools",
              "properties": {
                "open_source": {
                  "type": "object",
                  "description": "Open-source FPGA tools",
                  "properties": {
                    "synthesis": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source FPGA synthesis tools",
                      "examples": [
                        [
                          "yosys",
                          "nextpnr"
                        ],
                        [
                          "yosys"
                        ]
                      ]
                    },
                    "place_route": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source FPGA place and route tools",
                      "examples": [
                        [
                          "nextpnr",
                          "vpr"
                        ],
                        [
                          "nextpnr"
                        ]
                      ]
                    },
                    "programming": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source FPGA programming tools",
                      "examples": [
                        [
                          "openfpgaloader",
                          "fujprog"
                        ],
                        [
                          "openfpgaloader"
                        ]
                      ]
                    }
                  }
                },
                "commercial": {
                  "type": "object",
                  "description": "Commercial FPGA tools",
                  "properties": {
                    "synthesis": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial FPGA synthesis tools",
                      "examples": [
                        [
                          "vivado",
                          "quartus"
                        ],
                        [
                          "vivado"
                        ]
                      ]
                    },
                    "place_route": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial FPGA place and route tools",
                      "examples": [
                        [
                          "vivado",
                          "quartus"
                        ],
                        [
                          "vivado"
                        ]
                      ]
                    },
                    "programming": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial FPGA programming tools",
                      "examples": [
                        [
                          "vivado",
                          "quartus"
                        ],
                        [
                          "vivado"
                        ]
                      ]
                    }
                  }
                }
              }
            },
            "chiplet": {
              "type": "object",
              "description": "Chiplet design and verification tools",
              "properties": {
                "open_source": {
                  "type": "object",
                  "description": "Open-source chiplet tools",
                  "properties": {
                    "design": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source chiplet design tools",
                      "examples": [
                        [
                          "yosys",
                          "openroad"
                        ],
                        [
                          "yosys"
                        ]
                      ]
                    },
                    "integration": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source chiplet integration tools",
                      "examples": [
                        [
                          "openroad",
                          "magic"
                        ],
                        [
                          "openroad"
                        ]
                      ]
                    }
                  }
                },
                "commercial": {
                  "type": "object",
                  "description": "Commercial chiplet tools",
                  "properties": {
                    "design": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial chiplet design tools",
                      "examples": [
                        [
                          "innovus",
                          "virtuoso"
                        ],
                        [
                          "innovus"
                        ]
                      ]
                    },
                    "integration": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial chiplet integration tools",
                      "examples": [
                        [
                          "innovus",
                          "virtuoso"
                        ],
                        [
                          "innovus"
                        ]
                      ]
                    }
                  }
                }
              }
            },
            "analog": {
              "type": "object",
              "description": "Analog design and verification tools",
              "properties": {
                "open_source": {
                  "type": "object",
                  "description": "Open-source analog tools",
                  "properties": {
                    "schematic": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source schematic capture tools",
                      "examples": [
                        [
                          "xschem",
                          "kicad"
                        ],
                        [
                          "xschem"
                        ]
                      ]
                    },
                    "simulation": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source analog simulation tools",
                      "examples": [
                        [
                          "ngspice",
                          "xyce"
                        ],
                        [
                          "ngspice"
                        ]
                      ]
                    },
                    "layout": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Open-source analog layout tools",
                      "examples": [
                        [
                          "magic",
                          "klayout"
                        ],
                        [
                          "magic"
                        ]
                      ]
                    }
                  }
                },
                "commercial": {
                  "type": "object",
                  "description": "Commercial analog tools",
                  "properties": {
                    "schematic": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial schematic capture tools",
                      "examples": [
                        [
                          "virtuoso",
                          "composer"
                        ],
                        [
                          "virtuoso"
                        ]
                      ]
                    },
                    "simulation": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial analog simulation tools",
                      "examples": [
                        [
                          "spectre",
                          "hspice",
                          "ams_designer"
                        ],
                        [
                          "spectre"
                        ]
                      ]
                    },
                    "layout": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Commercial analog layout tools",
                      "examples": [
                        [
                          "virtuoso",
                          "laker"
                        ],
                        [
                          "virtuoso"
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "verification": {
          "type": "object",
          "description": "Verification and testing tools across all design flows",
          "properties": {
            "open_source": {
              "type": "object",
              "description": "Open-source verification tools",
              "properties": {
                "simulation": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Open-source simulation tools",
                  "examples": [
                    [
                      "verilator",
                      "iverilog"
                    ],
                    [
                      "verilator"
                    ]
                  ]
                },
                "formal": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Open-source formal verification tools",
                  "examples": [
                    [
                      "yosys-smtbmc",
                      "sby",
                      "symbiyosys"
                    ],
                    [
                      "yosys-smtbmc"
                    ]
                  ]
                },
                "coverage": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Open-source coverage tools",
                  "examples": [
                    [
                      "verilator",
                      "custom_python"
                    ],
                    [
                      "verilator"
                    ]
                  ]
                }
              }
            },
            "commercial": {
              "type": "object",
              "description": "Commercial verification tools",
              "properties": {
                "simulation": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Commercial simulation tools",
                  "examples": [
                    [
                      "vcs",
                      "xcelium",
                      "questa"
                    ],
                    [
                      "vcs"
                    ]
                  ]
                },
                "formal": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Commercial formal verification tools",
                  "examples": [
                    [
                      "onespin",
                      "jasper",
                      "vc_formal"
                    ],
                    [
                      "onespin"
                    ]
                  ]
                },
                "coverage": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Commercial coverage tools",
                  "examples": [
                    [
                      "vcs",
                      "questa"
                    ],
                    [
                      "vcs"
                    ]
                  ]
                }
              }
            }
          }
        },
        "security": {
          "type": "object",
          "description": "Security testing and analysis tools",
          "properties": {
            "open_source": {
              "type": "object",
              "description": "Open-source security tools",
              "properties": {
                "side_channel": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Side-channel analysis tools",
                  "examples": [
                    [
                      "chipwhisperer",
                      "custom_python"
                    ],
                    [
                      "chipwhisperer"
                    ]
                  ]
                },
                "fault_injection": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Fault injection testing tools",
                  "examples": [
                    [
                      "custom_python",
                      "numpy"
                    ],
                    [
                      "custom_python"
                    ]
                  ]
                },
                "cryptographic": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Cryptographic analysis tools",
                  "examples": [
                    [
                      "custom_python",
                      "scipy"
                    ],
                    [
                      "custom_python"
                    ]
                  ]
                }
              }
            },
            "commercial": {
              "type": "object",
              "description": "Commercial security tools",
              "properties": {
                "side_channel": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Side-channel analysis tools",
                  "examples": [
                    [
                      "secure_ic",
                      "rohde_schwarz"
                    ],
                    [
                      "secure_ic"
                    ]
                  ]
                },
                "fault_injection": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Fault injection testing tools",
                  "examples": [
                    [
                      "secure_ic",
                      "rambus_dpa"
                    ],
                    [
                      "secure_ic"
                    ]
                  ]
                },
                "cryptographic": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Cryptographic analysis tools",
                  "examples": [
                    [
                      "secure_ic"
                    ],
                    []
                  ]
                }
              }
            }
          }
        }
      },
      "examples": [
        {
          "meta": {
            "tool_availability": "hybrid",
            "primary_flow": "asic",
            "tool_validation": true
          },
          "design_flows": {
            "asic": {
              "open_source": {
                "synthesis": [
                  "yosys"
                ],
                "place_route": [
                  "openroad"
                ],
                "layout": [
                  "magic"
                ],
                "drc_lvs": [
                  "magic"
                ]
              },
              "commercial": {
                "synthesis": [],
                "place_route": [],
                "layout": [],
                "drc_lvs": []
              }
            },
            "fpga": {
              "open_source": {
                "synthesis": [
                  "yosys"
                ],
                "place_route": [
                  "nextpnr"
                ],
                "programming": [
                  "openfpgaloader"
                ]
              },
              "commercial": {
                "synthesis": [],
                "place_route": [],
                "programming": []
              }
            }
          },
          "verification": {
            "open_source": {
              "simulation": [
                "verilator"
              ],
              "formal": [
                "yosys-smtbmc"
              ],
              "coverage": [
                "verilator"
              ]
            },
            "commercial": {
              "simulation": [],
              "formal": [],
              "coverage": []
            }
          },
          "security": {
            "open_source": {
              "side_channel": [
                "chipwhisperer"
              ],
              "fault_injection": [
                "custom_python"
              ],
              "cryptographic": [
                "custom_python"
              ]
            },
            "commercial": {
              "side_channel": [],
              "fault_injection": [],
              "cryptographic": []
            }
          }
        },
        {
          "meta": {
            "tool_availability": "commercial_only",
            "primary_flow": "fpga",
            "tool_validation": true
          },
          "design_flows": {
            "fpga": {
              "commercial": {
                "synthesis": [
                  "vivado"
                ],
                "place_route": [
                  "vivado"
                ],
                "programming": [
                  "vivado"
                ]
              }
            }
          },
          "verification": {
            "commercial": {
              "simulation": [
                "modelsim"
              ],
              "formal": [
                "questa_formal"
              ],
              "coverage": [
                "modelsim"
              ]
            }
          },
          "security": {
            "commercial": {
              "side_channel": [
                "secure_ic"
              ],
              "fault_injection": [
                "secure_ic"
              ],
              "cryptographic": [
                "secure_ic"
              ]
            }
          }
        }
      ]
    },
    "x-version": {
      "type": "string",
      "description": "Schema version for tracking purposes - indicates which version of the Vyges Metadata Schema this metadata file conforms to. This should be the same across all metadata files using the same schema version.",
      "examples": [
        "1.0.0",
        "2.0.0"
      ]
    },
    "certification": {
      "type": "object",
      "description": "Industry certifications and standards compliance",
      "properties": {
        "iso_26262": {
          "type": "string",
          "enum": [
            "none",
            "qm",
            "asil_a",
            "asil_b",
            "asil_c",
            "asil_d"
          ],
          "description": "ISO 26262 Automotive Safety Integrity Level",
          "examples": [
            "none",
            "qm",
            "asil_a",
            "asil_b",
            "asil_c",
            "asil_d"
          ]
        },
        "ieee_1149_1": {
          "type": "boolean",
          "description": "IEEE 1149.1 JTAG boundary scan compliance",
          "examples": [
            true,
            false
          ]
        },
        "ieee_1500": {
          "type": "boolean",
          "description": "IEEE 1500 embedded core test compliance",
          "examples": [
            true,
            false
          ]
        },
        "other_certifications": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of other certifications or standards",
          "examples": [
            [
              "DO-254"
            ],
            [
              "IEC 61508"
            ],
            [
              "ISO 9001",
              "DO-254"
            ]
          ]
        }
      },
      "examples": [
        {
          "iso_26262": "asil_b",
          "ieee_1149_1": true,
          "ieee_1500": false,
          "other_certifications": [
            "DO-254"
          ]
        },
        {
          "iso_26262": "none",
          "ieee_1149_1": false,
          "ieee_1500": false,
          "other_certifications": []
        }
      ]
    },
    "reliability": {
      "type": "object",
      "description": "Reliability and quality metrics",
      "properties": {
        "fault_tolerance": {
          "type": "string",
          "enum": [
            "none",
            "basic",
            "advanced",
            "mission_critical"
          ],
          "description": "Level of fault tolerance implemented",
          "examples": [
            "none",
            "basic",
            "advanced",
            "mission_critical"
          ]
        },
        "error_detection": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of error detection mechanisms (e.g., parity, ECC, CRC)",
          "examples": [
            [
              "parity"
            ],
            [
              "ECC",
              "CRC"
            ],
            [
              "parity",
              "ECC",
              "CRC",
              "checksum"
            ]
          ]
        },
        "test_coverage": {
          "type": "object",
          "properties": {
            "line_coverage": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "examples": [
                85,
                90,
                95,
                100
              ]
            },
            "branch_coverage": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "examples": [
                80,
                85,
                90,
                95
              ]
            },
            "functional_coverage": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "examples": [
                90,
                95,
                98,
                100
              ]
            }
          },
          "description": "Test coverage percentages",
          "examples": [
            {
              "line_coverage": 90,
              "branch_coverage": 85,
              "functional_coverage": 95
            },
            {
              "line_coverage": 95,
              "branch_coverage": 90,
              "functional_coverage": 98
            }
          ]
        },
        "mtbf_hours": {
          "type": "number",
          "description": "Mean Time Between Failures in hours",
          "examples": [
            1000,
            10000,
            100000,
            1000000
          ]
        }
      },
      "examples": [
        {
          "fault_tolerance": "basic",
          "error_detection": [
            "parity",
            "CRC"
          ],
          "test_coverage": {
            "line_coverage": 90,
            "branch_coverage": 85,
            "functional_coverage": 95
          },
          "mtbf_hours": 10000
        },
        {
          "fault_tolerance": "mission_critical",
          "error_detection": [
            "ECC",
            "CRC",
            "checksum"
          ],
          "test_coverage": {
            "line_coverage": 95,
            "branch_coverage": 90,
            "functional_coverage": 98
          },
          "mtbf_hours": 100000
        }
      ]
    },
    "updated": {
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 timestamp when this IP was last updated",
      "examples": [
        "2024-01-20T14:45:00Z",
        "2024-01-15T16:20:00Z"
      ]
    },
    "categories": {
      "type": "array",
      "description": "Catalog categories and subcategories for IP classification",
      "$defs": {
        "categories": {
          "Analog & Mixed-Signal": {
            "description": "Analog circuits, mixed-signal designs, and analog-to-digital interfaces",
            "subcategories": [
              "Bandgap References",
              "Comparators",
              "Oscillators",
              "Temperature Sensors",
              "Voltage Regulators"
            ]
          },
          "Arithmetic Units": {
            "description": "Mathematical computation units and arithmetic logic blocks",
            "subcategories": [
              "Basic",
              "Custom DSP Cores",
              "Fixed-Point",
              "Floating-Point",
              "Vector"
            ]
          },
          "Base Libraries": {
            "description": "Standard cell libraries and fundamental building blocks",
            "subcategories": [
              "Arbiters",
              "Counters & Timers",
              "Crossbars",
              "Decoders",
              "Flip-Flops & Latches",
              "Muxes & Demuxes",
              "Pipeline & Bypass Logic",
              "Priority Encoders",
              "Synchronizers"
            ]
          },
          "Chiplet Integration": {
            "description": "Multi-die integration, chiplet interfaces, and die-to-die communication",
            "subcategories": [
              "AIB Interfaces",
              "BoW Interfaces",
              "Die-to-Die Protocol IP",
              "Interposer Models",
              "UCIe Interfaces",
              "Chiplet Wrappers"
            ]
          },
          "Control Logic": {
            "description": "Control and management logic blocks for system operation",
            "subcategories": [
              "Interrupt Controllers",
              "Power Management Units",
              "Reset & Clock Control",
              "Sequencers",
              "State Machines"
            ]
          },
          "Converters": {
            "description": "Analog-to-digital and digital-to-analog converters",
            "subcategories": [
              "ADC",
              "Clock Domain Crossers",
              "DAC",
              "Level Shifters"
            ]
          },
          "Interface Controllers": {
            "description": "Communication interface IP blocks for serial and parallel protocols",
            "subcategories": [
              "High-Speed Interfaces",
              "Parallel Interfaces",
              "Serial Interfaces"
            ]
          },
          "Memory Subsystems": {
            "description": "Memory controllers, interfaces, and storage subsystems",
            "subcategories": [
              "Cache Subsystems",
              "DRAM Controllers",
              "FIFOs & Buffers",
              "Flash Interfaces",
              "Register Files",
              "SRAM Controllers"
            ]
          },
          "Miscellaneous": {
            "description": "Utility and specialized IP blocks",
            "subcategories": [
              "Custom Accelerators",
              "IP Wrappers & Glue Logic",
              "LED Controllers",
              "PWM Generators",
              "Watchdog Timers"
            ]
          },
          "Processing Cores": {
            "description": "CPU cores, microcontrollers, and processing units",
            "subcategories": [
              "ARM-Compatible",
              "Co-Processors",
              "Custom ISAs",
              "Microcontrollers",
              "RISC-V",
              "Vector Processors"
            ]
          },
          "Security IP": {
            "description": "Cryptographic engines, secure boot, and security primitives",
            "subcategories": [
              "Crypto Engines",
              "Fuse Controllers",
              "Secure Boot Blocks",
              "Tamper Detection",
              "True Random Number Generators (TRNG)"
            ]
          },
          "Signal Processing": {
            "description": "Digital signal processing blocks and algorithms",
            "subcategories": [
              "Codecs",
              "Filters",
              "Transforms"
            ]
          },
          "Timing & Clocking": {
            "description": "Clock generation, distribution, and timing management",
            "subcategories": [
              "Clock Gating",
              "Clock Tree Models",
              "DLL",
              "Frequency Dividers",
              "PLL"
            ]
          },
          "Verification & Testing": {
            "description": "Testbenches, verification IP, and testing infrastructure",
            "subcategories": [
              "Assertions",
              "Driver/Monitor Agents",
              "Formal Models",
              "Scoreboards",
              "Testbenches"
            ]
          }
        }
      },
      "items": {
        "type": "object",
        "required": [
          "main_category"
        ],
        "properties": {
          "main_category": {
            "type": "string",
            "enum": [
              "Analog & Mixed-Signal",
              "Arithmetic Units",
              "Base Libraries",
              "Chiplet Integration",
              "Control Logic",
              "Converters",
              "Interface Controllers",
              "Memory Subsystems",
              "Miscellaneous",
              "Processing Cores",
              "Security IP",
              "Signal Processing",
              "Timing & Clocking",
              "Verification & Testing"
            ],
            "description": "Primary functional category for the IP block"
          },
          "sub_category": {
            "type": "string",
            "description": "Secondary subcategory within the main category. The allowed values depend on the main_category selected."
          },
          "description": {
            "type": "string",
            "description": "Optional description of why this category applies to the IP"
          }
        }
      },
      "examples": [
        [
          {
            "main_category": "Interface Controllers",
            "sub_category": "Serial Interfaces",
            "description": "SPI master controller for communication with peripheral devices"
          }
        ],
        [
          {
            "main_category": "Signal Processing",
            "sub_category": "Transforms",
            "description": "Fast Fourier Transform implementation for frequency domain analysis"
          }
        ],
        [
          {
            "main_category": "Converters",
            "sub_category": "ADC",
            "description": "Analog-to-Digital Converter for sensor interface applications"
          }
        ],
        [
          {
            "main_category": "Arithmetic Units",
            "sub_category": "Fixed-Point",
            "description": "Fixed-point arithmetic unit optimized for DSP applications"
          }
        ],
        [
          {
            "main_category": "Memory Subsystems",
            "sub_category": "SRAM Controllers",
            "description": "SRAM memory controller with configurable interface options"
          }
        ]
      ]
    },
    "verification": {
      "type": "object",
      "description": "Legacy verification metadata (use 'test' and 'flows' sections instead)",
      "properties": {
        "testbenches": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of testbench files or frameworks",
          "examples": [
            [
              "test_spi_controller.py",
              "test_apb_interface.py"
            ],
            [
              "tb_spi.v"
            ]
          ]
        },
        "framework": {
          "type": "string",
          "description": "Test framework used (e.g., cocotb, UVM)",
          "examples": [
            "cocotb",
            "UVM",
            "SystemVerilog",
            "VUnit"
          ]
        },
        "coverage": {
          "type": "object",
          "description": "Code coverage metrics",
          "properties": {
            "lines": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Line coverage percentage",
              "examples": [
                95,
                88,
                100
              ]
            },
            "branches": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Branch coverage percentage",
              "examples": [
                88,
                92,
                100
              ]
            }
          },
          "examples": [
            {
              "lines": 95,
              "branches": 88
            },
            {
              "lines": 100,
              "branches": 100
            }
          ]
        },
        "formal": {
          "type": "object",
          "description": "Formal verification results",
          "properties": {
            "tools": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of formal verification tools used",
              "examples": [
                [
                  "yosys-smtbmc",
                  "sby"
                ],
                [
                  "jtag",
                  "symbiyosys"
                ]
              ]
            },
            "status": {
              "type": "string",
              "enum": [
                "passed",
                "partial",
                "failed",
                "untested"
              ],
              "description": "Formal verification status",
              "examples": [
                "passed",
                "partial",
                "untested"
              ]
            }
          },
          "examples": [
            {
              "tools": [
                "yosys-smtbmc",
                "sby"
              ],
              "status": "passed"
            },
            {
              "tools": [
                "jtag"
              ],
              "status": "partial"
            }
          ]
        }
      },
      "examples": [
        {
          "testbenches": [
            "test_spi_controller.py"
          ],
          "framework": "cocotb",
          "coverage": {
            "lines": 95,
            "branches": 88
          },
          "formal": {
            "tools": [
              "yosys-smtbmc"
            ],
            "status": "passed"
          }
        }
      ]
    },
    "test": {
      "type": "object",
      "description": "Testing and verification status information",
      "properties": {
        "coverage": {
          "type": "boolean",
          "description": "Whether code coverage is enabled for this IP",
          "examples": [
            true,
            false
          ]
        },
        "testbenches": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of testbench frameworks used (e.g., cocotb, UVM, SystemVerilog)",
          "examples": [
            [
              "cocotb"
            ],
            [
              "UVM",
              "SystemVerilog"
            ],
            [
              "VUnit"
            ]
          ]
        },
        "simulators": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of simulators used for testing (e.g., verilator, iverilog, ModelSim)",
          "examples": [
            [
              "verilator"
            ],
            [
              "iverilog",
              "ModelSim"
            ],
            [
              "VCS",
              "Xcelium"
            ]
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "passing",
            "failing",
            "partial",
            "untested"
          ],
          "description": "Overall test status",
          "examples": [
            "passing",
            "partial",
            "untested"
          ]
        }
      },
      "required": [
        "status"
      ],
      "examples": [
        {
          "coverage": true,
          "testbenches": [
            "cocotb"
          ],
          "simulators": [
            "verilator"
          ],
          "status": "passing"
        },
        {
          "testbenches": [
            "UVM"
          ],
          "simulators": [
            "VCS"
          ],
          "status": "partial"
        }
      ]
    },
    "toolchain_support": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of EDA tools or simulators this IP has been tested with (legacy field)",
      "examples": [
        [
          "verilator",
          "yosys"
        ],
        [
          "VCS",
          "Design Compiler"
        ],
        [
          "iverilog",
          "ModelSim"
        ]
      ]
    },
    "maturity": {
      "type": "string",
      "enum": [
        "prototype",
        "alpha",
        "beta",
        "production",
        "deprecated"
      ],
      "description": "Indicates readiness or lifecycle state of the IP",
      "examples": [
        "production",
        "beta",
        "prototype"
      ]
    },
    "commercial": {
      "type": "object",
      "description": "Commercial/licensing contact and monetization options",
      "properties": {
        "contact_email": {
          "type": "string",
          "format": "email",
          "description": "Contact email for commercial inquiries",
          "examples": [
            "sales@acme.com",
            "licensing@vyges.com",
            "contact@example.com"
          ]
        },
        "sales_page": {
          "type": "string",
          "format": "uri",
          "description": "URL to sales or licensing page",
          "examples": [
            "https://acme.com/sales",
            "https://vyges.com/licensing",
            "https://example.com/pricing"
          ]
        },
        "pricing_model": {
          "type": "string",
          "enum": [
            "free",
            "evaluation",
            "subscription",
            "one-time",
            "royalty",
            "custom",
            "contact-us"
          ],
          "description": "Pricing model for this IP",
          "examples": [
            "free",
            "evaluation",
            "subscription",
            "one-time",
            "royalty",
            "custom",
            "contact-us"
          ]
        },
        "available_regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of regions/countries this IP can be licensed in",
          "examples": [
            [
              "US",
              "EU",
              "JP"
            ],
            [
              "US",
              "CA"
            ],
            [
              "Global"
            ],
            [
              "US",
              "EU",
              "UK",
              "JP",
              "KR"
            ]
          ]
        }
      },
      "examples": [
        {
          "contact_email": "sales@acme.com",
          "sales_page": "https://acme.com/sales",
          "pricing_model": "one-time",
          "available_regions": [
            "US",
            "EU",
            "JP"
          ]
        },
        {
          "pricing_model": "free",
          "available_regions": [
            "Global"
          ]
        },
        {
          "contact_email": "licensing@vyges.com",
          "pricing_model": "contact-us",
          "available_regions": [
            "US",
            "EU",
            "UK",
            "JP",
            "KR"
          ]
        }
      ]
    },
    "source": {
      "type": "object",
      "description": "Source code location and versioning information",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "git",
            "archive"
          ],
          "description": "Type of source reference",
          "examples": [
            "git",
            "archive"
          ]
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "URL to the source repository or archive",
          "examples": [
            "https://github.com/vyges/spi-controller",
            "https://github.com/acme/pcie-phy-encrypted"
          ]
        },
        "commit": {
          "type": "string",
          "description": "Git commit hash or version identifier",
          "examples": [
            "a1b2c3d",
            "main",
            "v1.0.0"
          ]
        },
        "hash": {
          "type": "string",
          "description": "SHA256 for archive-based sources",
          "examples": [
            "sha256:abc123...",
            "sha256:def456..."
          ]
        },
        "private": {
          "type": "boolean",
          "description": "Whether the repository is private or contains proprietary content",
          "examples": [
            false,
            true
          ]
        },
        "containsEncryptedPayload": {
          "type": "boolean",
          "description": "Whether the repository contains encrypted or proprietary IP",
          "examples": [
            false,
            true
          ]
        },
        "indexing": {
          "type": "boolean",
          "description": "Whether Vyges should index the repository contents",
          "default": true,
          "examples": [
            true,
            false
          ]
        }
      },
      "required": [
        "type",
        "url"
      ],
      "examples": [
        {
          "type": "git",
          "url": "https://github.com/vyges/spi-controller",
          "commit": "a1b2c3d",
          "private": false,
          "containsEncryptedPayload": false,
          "indexing": true
        },
        {
          "type": "git",
          "url": "https://github.com/acme/pcie-phy-encrypted",
          "private": true,
          "containsEncryptedPayload": true,
          "indexing": false
        }
      ]
    },
    "keywords": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Keywords for search and discovery",
      "examples": [
        [
          "serial",
          "protocol",
          "master",
          "slave",
          "communication"
        ],
        [
          "high-speed",
          "phy",
          "gen4",
          "encrypted"
        ],
        [
          "asynchronous",
          "serial",
          "uart"
        ]
      ]
    },
    "target": {
      "type": "array",
      "description": "Target platforms this IP supports",
      "items": {
        "type": "string",
        "enum": [
          "asic",
          "fpga"
        ]
      },
      "minItems": 1,
      "examples": [
        [
          "asic"
        ],
        [
          "fpga"
        ],
        [
          "asic",
          "fpga"
        ]
      ]
    },
    "demo": {
      "type": "object",
      "description": "Interactive or downloadable demo availability",
      "properties": {
        "sandbox_link": {
          "type": "string",
          "format": "uri",
          "description": "URL to interactive demo or sandbox",
          "examples": [
            "https://demo.vyges.com/spi-controller",
            "https://acme.com/demo/pcie-phy",
            "https://playground.vyges.com"
          ]
        },
        "emulation_video": {
          "type": "string",
          "format": "uri",
          "description": "URL to demonstration video",
          "examples": [
            "https://youtube.com/watch?v=abc123",
            "https://acme.com/demo/video.mp4",
            "https://vyges.com/demo/spi-controller.mp4"
          ]
        },
        "testbench_example": {
          "type": "string",
          "format": "uri",
          "description": "URL to example testbench or simulation files",
          "examples": [
            "https://github.com/vyges/spi-controller/tree/main/tb",
            "https://acme.com/examples/testbench.zip"
          ]
        },
        "integration_example": {
          "type": "string",
          "format": "uri",
          "description": "URL to integration example or wrapper code",
          "examples": [
            "https://github.com/vyges/spi-controller/tree/main/examples",
            "https://acme.com/examples/integration.zip"
          ]
        }
      },
      "examples": [
        {
          "sandbox_link": "https://demo.vyges.com/spi-controller",
          "emulation_video": "https://youtube.com/watch?v=abc123",
          "testbench_example": "https://github.com/vyges/spi-controller/tree/main/tb",
          "integration_example": "https://github.com/vyges/spi-controller/tree/main/examples"
        },
        {
          "emulation_video": "https://acme.com/demo/video.mp4",
          "testbench_example": "https://acme.com/examples/testbench.zip"
        }
      ]
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "target": {
            "contains": {
              "const": "fpga"
            }
          }
        }
      },
      "then": {
        "required": [
          "fpga"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "target": {
            "contains": {
              "const": "asic"
            }
          }
        }
      },
      "then": {
        "required": [
          "asic"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "design_type": {
            "contains": {
              "const": "analog"
            }
          }
        }
      },
      "then": {
        "properties": {
          "asic": {
            "required": [
              "flavor",
              "pdks",
              "tools",
              "analog_models",
              "symbol_views",
              "layout_views"
            ]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "design_type": {
            "contains": {
              "const": "digital"
            }
          }
        }
      },
      "then": {
        "properties": {
          "asic": {
            "required": [
              "flavor",
              "pdks",
              "synthesis_tool"
            ]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "design_type": {
            "contains": {
              "const": "mixed-signal"
            }
          }
        }
      },
      "then": {
        "properties": {
          "asic": {
            "required": [
              "flavor",
              "pdks",
              "digital_partition",
              "analog_partition",
              "co_simulation"
            ]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "design_type": {
            "contains": {
              "const": "hard-ip"
            }
          }
        }
      },
      "then": {
        "properties": {
          "fpga": {
            "required": [
              "hard_ip",
              "vendor"
            ]
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "automation": {
            "properties": {
              "automation_level": {
                "const": "enhanced"
              }
            }
          }
        }
      },
      "then": {
        "required": [
          "parameters",
          "dependencies",
          "toolRequirements"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "automation": {
            "properties": {
              "automation_level": {
                "const": "full"
              }
            }
          }
        }
      },
      "then": {
        "required": [
          "parameters",
          "dependencies",
          "toolRequirements",
          "performance",
          "reliability",
          "packaging"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "source": {
            "properties": {
              "containsEncryptedPayload": {
                "const": true
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "automation": {
            "properties": {
              "blocking_issues": {
                "contains": {
                  "const": "encrypted_ip"
                }
              }
            }
          }
        }
      }
    }
  ],
  "additionalProperties": false,
  "examples": [
    {
      "name": "spi-controller",
      "x-version": "1.0.0",
      "version": "1.0.0",
      "license": "MIT",
      "interfaces": [
        {
          "type": "apb",
          "direction": "slave",
          "protocol": "AMBA APB",
          "signals": [
            {
              "name": "PCLK",
              "direction": "input",
              "width": 1,
              "description": "APB clock signal"
            },
            {
              "name": "PRESETn",
              "direction": "input",
              "width": 1,
              "description": "APB reset signal (active low)"
            },
            {
              "name": "PSEL",
              "direction": "input",
              "width": 1,
              "description": "APB select signal"
            },
            {
              "name": "PENABLE",
              "direction": "input",
              "width": 1,
              "description": "APB enable signal"
            },
            {
              "name": "PWRITE",
              "direction": "input",
              "width": 1,
              "description": "APB write signal"
            },
            {
              "name": "PADDR",
              "direction": "input",
              "width": 8,
              "description": "APB address bus"
            },
            {
              "name": "PWDATA",
              "direction": "input",
              "width": 32,
              "description": "APB write data bus"
            },
            {
              "name": "PRDATA",
              "direction": "output",
              "width": 32,
              "description": "APB read data bus"
            },
            {
              "name": "PREADY",
              "direction": "output",
              "width": 1,
              "description": "APB ready signal"
            },
            {
              "name": "PSLVERR",
              "direction": "output",
              "width": 1,
              "description": "APB slave error signal"
            }
          ]
        },
        {
          "type": "spi",
          "direction": "master",
          "protocol": "SPI",
          "signals": [
            {
              "name": "SCLK",
              "direction": "output",
              "width": 1,
              "description": "SPI clock signal"
            },
            {
              "name": "MOSI",
              "direction": "output",
              "width": 1,
              "description": "SPI master out slave in"
            },
            {
              "name": "MISO",
              "direction": "input",
              "width": 1,
              "description": "SPI master in slave out"
            },
            {
              "name": "SS_n",
              "direction": "output",
              "width": 1,
              "description": "SPI slave select (active low)"
            }
          ]
        }
      ],
      "template": "vyges-ip-template@1.0.0",
      "target": [
        "asic",
        "fpga"
      ],
      "design_type": [
        "digital"
      ],
      "maturity": "stable",
      "description": "Configurable SPI controller with APB slave interface supporting multiple slave devices",
      "parameters": [
        {
          "name": "DATA_WIDTH",
          "type": "integer",
          "default": 8,
          "description": "SPI data width in bits",
          "required": false
        },
        {
          "name": "CLOCK_POLARITY",
          "type": "integer",
          "default": 0,
          "description": "SPI clock polarity (0 or 1)",
          "required": false
        },
        {
          "name": "CLOCK_PHASE",
          "type": "integer",
          "default": 0,
          "description": "SPI clock phase (0 or 1)",
          "required": false
        }
      ],
      "categories": {
        "primary": "communication",
        "secondary": [
          "serial",
          "master"
        ],
        "tags": [
          "spi",
          "apb",
          "communication",
          "serial",
          "master"
        ]
      },
      "created": "2024-01-15T10:30:00Z",
      "updated": "2024-01-15T10:30:00Z"
    },
    {
      "name": "ddr4-controller",
      "x-version": "1.0.0",
      "version": "2.1.0",
      "license": "Apache-2.0",
      "interfaces": [
        {
          "type": "axi4",
          "direction": "slave",
          "protocol": "AMBA AXI4",
          "signals": [
            {
              "name": "ACLK",
              "direction": "input",
              "width": 1,
              "description": "AXI clock signal"
            },
            {
              "name": "ARESETn",
              "direction": "input",
              "width": 1,
              "description": "AXI reset signal (active low)"
            },
            {
              "name": "AWVALID",
              "direction": "input",
              "width": 1,
              "description": "AXI write address valid"
            },
            {
              "name": "AWREADY",
              "direction": "output",
              "width": 1,
              "description": "AXI write address ready"
            },
            {
              "name": "WVALID",
              "direction": "input",
              "width": 1,
              "description": "AXI write data valid"
            },
            {
              "name": "WREADY",
              "direction": "output",
              "width": 1,
              "description": "AXI write data ready"
            },
            {
              "name": "BVALID",
              "direction": "output",
              "width": 1,
              "description": "AXI write response valid"
            },
            {
              "name": "BREADY",
              "direction": "input",
              "width": 1,
              "description": "AXI write response ready"
            }
          ]
        }
      ],
      "template": "vyges-ip-template@1.0.0",
      "target": [
        "asic"
      ],
      "design_type": [
        "digital"
      ],
      "maturity": "stable",
      "description": "High-performance DDR4 memory controller with AXI4 slave interface supporting DDR4-3200",
      "parameters": [
        {
          "name": "DATA_WIDTH",
          "type": "integer",
          "default": 64,
          "description": "DDR4 data bus width",
          "required": false
        },
        {
          "name": "ADDR_WIDTH",
          "type": "integer",
          "default": 32,
          "description": "DDR4 address bus width",
          "required": false
        }
      ],
      "categories": {
        "primary": "memory",
        "secondary": [
          "controller",
          "high-speed"
        ],
        "tags": [
          "ddr4",
          "memory",
          "controller",
          "axi4",
          "high-speed"
        ]
      },
      "performance": {
        "throughput": {
          "value": 25.6,
          "unit": "GB/s",
          "description": "Maximum memory bandwidth"
        },
        "frequency": {
          "value": 1600,
          "unit": "MHz",
          "description": "Maximum operating frequency"
        }
      },
      "created": "2024-01-15T10:30:00Z",
      "updated": "2024-01-15T10:30:00Z"
    },
    {
      "name": "adc-converter",
      "x-version": "1.0.0",
      "version": "1.2.0",
      "license": "MIT",
      "interfaces": [
        {
          "type": "analog",
          "direction": "input",
          "protocol": "Single-ended",
          "signals": [
            {
              "name": "VIN_P",
              "direction": "input",
              "width": 1,
              "description": "Positive analog input"
            },
            {
              "name": "VIN_N",
              "direction": "input",
              "width": 1,
              "description": "Negative analog input"
            }
          ]
        },
        {
          "type": "digital",
          "direction": "output",
          "protocol": "Parallel",
          "signals": [
            {
              "name": "DOUT",
              "direction": "output",
              "width": 12,
              "description": "Digital output data"
            },
            {
              "name": "VALID",
              "direction": "output",
              "width": 1,
              "description": "Data valid signal"
            },
            {
              "name": "CLK",
              "direction": "input",
              "width": 1,
              "description": "ADC clock signal"
            }
          ]
        }
      ],
      "template": "vyges-ip-template@1.0.0",
      "target": [
        "asic"
      ],
      "design_type": [
        "analog",
        "mixed-signal"
      ],
      "maturity": "beta",
      "description": "12-bit SAR ADC converter with configurable resolution and sampling rate",
      "parameters": [
        {
          "name": "RESOLUTION",
          "type": "integer",
          "default": 12,
          "description": "ADC resolution in bits",
          "required": false
        },
        {
          "name": "SAMPLING_RATE",
          "type": "integer",
          "default": 1000000,
          "description": "ADC sampling rate in samples per second",
          "required": false
        }
      ],
      "categories": {
        "primary": "analog",
        "secondary": [
          "converter",
          "data-acquisition"
        ],
        "tags": [
          "adc",
          "analog",
          "converter",
          "sar",
          "mixed-signal"
        ]
      },
      "performance": {
        "resolution": {
          "value": 12,
          "unit": "bits",
          "description": "ADC resolution"
        },
        "snr": {
          "value": 70,
          "unit": "dB",
          "description": "Signal-to-noise ratio"
        }
      },
      "created": "2024-01-15T10:30:00Z",
      "updated": "2024-01-15T10:30:00Z"
    },
    {
      "name": "ucie-interface",
      "x-version": "1.0.0",
      "version": "1.0.0",
      "license": "Apache-2.0",
      "interfaces": [
        {
          "type": "ucie",
          "direction": "bidirectional",
          "protocol": "UCIe",
          "signals": [
            {
              "name": "ucie_clk",
              "direction": "input",
              "width": 1,
              "description": "UCIe clock signal"
            },
            {
              "name": "ucie_rst_n",
              "direction": "input",
              "width": 1,
              "description": "UCIe reset signal (active low)"
            },
            {
              "name": "ucie_tx_data",
              "direction": "output",
              "width": 64,
              "description": "UCIe transmit data"
            },
            {
              "name": "ucie_rx_data",
              "direction": "input",
              "width": 64,
              "description": "UCIe receive data"
            },
            {
              "name": "ucie_tx_valid",
              "direction": "output",
              "width": 1,
              "description": "UCIe transmit valid"
            },
            {
              "name": "ucie_rx_valid",
              "direction": "input",
              "width": 1,
              "description": "UCIe receive valid"
            }
          ]
        }
      ],
      "template": "vyges-ip-template@1.0.0",
      "target": [
        "asic"
      ],
      "design_type": [
        "chiplet"
      ],
      "maturity": "alpha",
      "description": "UCIe die-to-die interface controller for chiplet integration",
      "chiplet": {
        "compliance": {
          "cdxml": {
            "version": "cdxml-v0.2",
            "compliance_status": "compliant",
            "validation_date": "2024-01-15T10:30:00Z",
            "validation_tools": [
              "cdxml-validator",
              "ocp-compliance-checker"
            ]
          },
          "bow_specification": {
            "spec_version": "2.0d.1",
            "compliance_status": "not_applicable",
            "notes": "UCIe uses different protocol than BoW"
          }
        },
        "extensions": {
          "meta": {
            "chiplet_type": "interface",
            "die_function": "communication",
            "integration_level": "die_level"
          },
          "testing": {
            "test_access": "boundary_scan",
            "loopback_capability": true,
            "prbs_generation": true
          },
          "lifecycle": {
            "supply_chain": "trusted_fabricator",
            "certification": "iso_9001",
            "version_control": "semantic_versioning"
          }
        }
      },
      "created": "2024-01-15T10:30:00Z",
      "updated": "2024-01-15T10:30:00Z"
    }
  ]
}